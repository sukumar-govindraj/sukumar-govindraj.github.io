%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1807.w042.n002.11A.p15.11-01.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: Myst
%%CreationDate: 7/20/2018
%%BoundingBox: 0 0 590 450
%%HiResBoundingBox: 0 0 590 450
%%CropBox: 0 0 590 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1807.w042.n002.11A.p15.11</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-07-20T13:21:44+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-07-20T13:21:44+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-07-20T13:21:44+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>196</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAxAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;YqxL81PO0nkzyTfa5BEJ7tCkNpG9eHqytxVnpQ8V3anelMVfGmu+f/Ouu3bXWqa1d3DsxYJ6rJEh&#xA;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&#xA;xV2KuxV2Kv8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:c9ff91af-59d7-2e47-a6d8-4de28b94a9db</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:c9ff91af-59d7-2e47-a6d8-4de28b94a9db</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:85d3f642-8ace-ec46-ad3d-99355f495342</stRef:instanceID>
            <stRef:documentID>xmp.did:85d3f642-8ace-ec46-ad3d-99355f495342</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:eadd8405-3f82-3144-8e1d-b8b95b6a935e</stEvt:instanceID>
                  <stEvt:when>2018-07-18T13:02:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c9ff91af-59d7-2e47-a6d8-4de28b94a9db</stEvt:instanceID>
                  <stEvt:when>2018-07-20T13:21:44+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>590.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
590 450 li
590 0 li
cp
clp
590 450 mo
0 450 li
0 0 li
590 0 li
590 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
410.575 64.6045 mo
350.997 64.4736 309.342 64.3525 280.143 64.2681 cv
211.759 64.0693 211.759 64.0693 209.852 64.5869 cv
209.59 63.6216 li
211.627 63.0693 211.628 63.0693 280.146 63.2681 cv
309.345 63.3525 351 63.4736 410.577 63.6045 cv
410.575 64.6045 li
cp
.258824 .176471 .317647 rgb
f
553.644 430.795 mo
48.0946 430.795 li
47.7896 430.795 47.5428 430.548 47.5428 430.243 cv
47.5428 429.938 47.7896 429.691 48.0946 429.691 cv
553.644 429.691 li
553.949 429.691 554.195 429.938 554.195 430.243 cv
554.195 430.548 553.949 430.795 553.644 430.795 cv
cp
.87451 .796078 .937255 rgb
f
510.559 176.379 mo
510.559 185.319 480.651 182.427 480.651 182.427 cv
481.567 159.737 li
498.033 151.46 li
493.122 122.469 li
492.934 121.376 li
491.82 114.81 li
500.88 106.897 li
500.88 106.897 502.514 112.371 504.555 119.235 cv
504.655 119.588 504.765 119.952 504.864 120.305 cv
507.325 128.638 510.25 138.647 511.552 143.547 cv
516.066 160.642 510.559 167.694 510.559 176.379 cv
1 .85098 .85098 rgb
f
504.864 120.305 mo
500.406 121.663 495.881 122.259 493.122 122.468 cv
492.151 122.546 491.4 122.579 490.948 122.579 cv
490.639 122.579 490.396 122.336 490.396 122.027 cv
490.396 121.729 490.639 121.475 490.948 121.475 cv
491.345 121.475 492.029 121.442 492.934 121.376 cv
495.594 121.166 500.13 120.57 504.555 119.235 cv
504.655 119.588 504.765 119.952 504.864 120.305 cv
cp
.807843 .568627 .568627 rgb
f
485.761 402.719 mo
485.761 402.719 485.605 412 481.752 418.69 cv
477.899 425.381 471.509 429.936 473.717 429.793 cv
472.383 429.793 493.788 430.488 494.444 429.793 cv
503.057 420.663 501.64 404.369 501.64 404.369 cv
485.761 402.719 li
cp
.537255 .384314 .627451 rgb
f
501.573 404.84 mo
501.143 412.267 li
501.143 412.422 li
501.076 413.426 li
500.127 430.08 li
493.881 430.08 li
491.795 413.823 li
491.652 412.698 li
491.652 412.687 li
490.78 405.933 li
501.573 404.84 li
cp
.694118 .521569 .776471 rgb
f
466.745 414.767 mo
466.789 415.193 li
466.821 415.083 li
466.886 415.284 li
466.898 416.279 li
465.618 429.793 li
460.232 429.793 li
459.294 423.513 li
459.283 423.502 li
459.073 422.056 li
459.062 422.034 li
458.223 416.417 li
465.982 414.916 li
466.745 414.767 li
cp
f
437.883 357.354 mo
436.278 359.092 435.902 365.007 441.996 368.991 cv
448.279 373.101 467.664 375.502 472.161 375.952 cv
490.945 377.83 508.485 370.893 510.554 368.755 cv
511.519 367.758 510.554 365.781 510.554 365.781 cv
462.025 357.926 li
462.025 357.926 442.08 352.81 437.883 357.354 cv
cp
.588235 .423529 .423529 rgb
f
463.792 365.136 mo
463.792 392.727 li
450.776 393.647 li
448.279 366.792 li
463.792 365.136 li
cp
1 .741176 .611765 rgb
f
502.37 365.394 mo
501.893 395.357 li
490.489 396.506 li
486.704 365.136 li
502.37 365.394 li
cp
f
466.925 414.752 mo
466.925 414.873 466.489 416.516 465.971 417.035 cv
465.96 417.046 li
465.606 417.421 465.176 417.763 464.713 418.094 cv
464.646 418.139 li
463.951 418.624 463.19 419.066 462.461 419.485 cv
461.512 420.048 460.629 420.578 460.066 421.14 cv
459.824 421.383 459.493 421.692 459.073 422.056 cv
458.974 422.134 li
458.952 422.156 li
458.51 422.531 457.981 422.95 457.363 423.403 cv
454.118 425.764 448.529 430.823 439.837 430.521 cv
431.833 430.243 426.108 430.243 421.142 430.223 cv
420.21 430.219 420.149 428.601 421.076 428.535 cv
430.986 427.795 438.016 420.589 442.729 412.918 cv
443.292 412.003 443.821 411.076 444.318 410.159 cv
444.715 409.42 445.102 408.681 445.455 407.952 cv
445.918 407.014 446.349 406.087 446.746 405.193 cv
447.055 404.498 447.342 403.825 447.607 403.174 cv
448.004 402.203 448.357 401.276 448.677 400.415 cv
450.123 396.42 450.774 393.65 450.774 393.65 cv
463.797 392.723 li
463.797 392.723 466.798 406.705 467.03 413.868 cv
467.052 414.166 466.925 414.487 466.925 414.752 cv
cp
.694118 .521569 .776471 rgb
f
510.559 365.78 mo
510.559 365.78 506.774 366.354 501.189 367.082 cv
500.781 367.137 500.351 367.193 499.92 367.248 cv
494.446 367.943 487.527 368.76 480.784 369.345 cv
480.42 369.378 480.055 369.4 479.702 369.433 cv
472.485 370.029 465.587 370.338 461.062 369.93 cv
458.502 369.698 456.019 369.389 453.668 368.991 cv
453.315 368.936 452.962 368.881 452.609 368.815 cv
443.636 367.204 436.993 364.378 436.96 360.405 cv
436.915 355.252 444.641 353.221 445.005 342.019 cv
445.38 330.829 437.313 221.583 441.528 216.429 cv
443.052 214.575 447.974 212.809 453.823 211.673 cv
464.042 209.675 477.098 209.587 479.768 214.211 cv
479.868 214.399 li
479.868 214.399 480.044 214.664 480.353 215.193 cv
482.726 219.232 493.045 239.042 494.667 279.699 cv
496.51 325.675 510.559 365.78 510.559 365.78 cv
1 .85098 .85098 rgb
f
486.707 172.002 mo
479.898 214.182 li
479.865 214.402 li
478.408 214.513 li
459.702 215.903 li
453.389 216.378 li
452.628 216.433 li
452.672 216.268 li
452.937 215.197 li
453.82 211.676 li
466.026 162.897 li
479.865 154.62 li
486.707 172.002 li
f
480.351 215.197 mo
474.248 216.665 468.476 217.106 463.73 217.106 cv
459.073 217.106 455.409 216.687 453.389 216.378 cv
453.114 216.334 452.882 216.301 452.672 216.268 cv
452.032 216.157 451.679 216.091 451.657 216.08 cv
451.889 214.998 li
451.911 215.009 452.275 215.087 452.937 215.197 cv
454.206 215.407 456.568 215.738 459.702 215.903 cv
464.536 216.157 471.18 216.047 478.408 214.513 cv
478.861 214.424 479.313 214.314 479.766 214.215 cv
479.898 214.182 li
479.898 214.182 480.042 214.667 480.351 215.197 cv
.807843 .568627 .568627 rgb
f
410.576 414.612 mo
209.72 414.612 li
209.72 60.459 li
410.576 60.459 li
410.576 414.612 li
cp
.964706 .921569 1 rgb
f
410.576 73.5328 mo
209.72 73.5328 li
209.72 42.6382 li
209.72 40.0951 211.782 38.0336 214.325 38.0336 cv
405.971 38.0336 li
408.515 38.0336 410.576 40.0951 410.576 42.6382 cv
410.576 73.5328 li
cp
.411765 .270588 .509804 rgb
f
335.874 56.7287 mo
286.233 56.7287 li
285.151 56.7287 284.274 55.8517 284.274 54.7698 cv
284.274 53.6879 285.151 52.8108 286.233 52.8108 cv
335.874 52.8108 li
336.956 52.8108 337.833 53.6879 337.833 54.7698 cv
337.833 55.8517 336.956 56.7287 335.874 56.7287 cv
cp
.243137 .145098 .329412 rgb
f
404.521 430.534 mo
215.775 430.534 li
212.431 430.534 209.72 427.823 209.72 424.479 cv
209.72 386.942 li
410.576 386.942 li
410.576 424.479 li
410.576 427.823 407.865 430.534 404.521 430.534 cv
cp
.411765 .270588 .509804 rgb
f
397.388 140.606 mo
362.371 140.606 li
362.066 140.606 361.819 140.359 361.819 140.054 cv
361.819 139.749 362.066 139.502 362.371 139.502 cv
397.388 139.502 li
397.693 139.502 397.94 139.749 397.94 140.054 cv
397.94 140.359 397.693 140.606 397.388 140.606 cv
cp
f
397.388 145.256 mo
362.371 145.256 li
362.066 145.256 361.819 145.009 361.819 144.704 cv
361.819 144.399 362.066 144.153 362.371 144.153 cv
397.388 144.153 li
397.693 144.153 397.94 144.399 397.94 144.704 cv
397.94 145.009 397.693 145.256 397.388 145.256 cv
cp
f
391.306 149.906 mo
368.453 149.906 li
368.148 149.906 367.901 149.659 367.901 149.354 cv
367.901 149.049 368.148 148.803 368.453 148.803 cv
391.306 148.803 li
391.611 148.803 391.858 149.049 391.858 149.354 cv
391.858 149.659 391.611 149.906 391.306 149.906 cv
cp
f
254.451 307.692 mo
225.748 307.692 li
225.443 307.692 225.196 307.445 225.196 307.141 cv
225.196 306.836 225.443 306.589 225.748 306.589 cv
254.451 306.589 li
254.756 306.589 255.002 306.836 255.002 307.141 cv
255.002 307.445 254.756 307.692 254.451 307.692 cv
cp
f
251.036 312.097 mo
229.162 312.097 li
228.857 312.097 228.61 311.85 228.61 311.545 cv
228.61 311.24 228.857 310.993 229.162 310.993 cv
251.036 310.993 li
251.341 310.993 251.588 311.24 251.588 311.545 cv
251.588 311.85 251.341 312.097 251.036 312.097 cv
cp
f
256.837 303.288 mo
223.361 303.288 li
223.056 303.288 222.809 303.041 222.809 302.736 cv
222.809 302.431 223.056 302.184 223.361 302.184 cv
256.837 302.184 li
257.142 302.184 257.389 302.431 257.389 302.736 cv
257.389 303.041 257.142 303.288 256.837 303.288 cv
cp
f
301.916 307.692 mo
275.572 307.692 li
275.267 307.692 275.02 307.445 275.02 307.141 cv
275.02 306.836 275.267 306.589 275.572 306.589 cv
301.916 306.589 li
302.221 306.589 302.468 306.836 302.468 307.141 cv
302.468 307.445 302.221 307.692 301.916 307.692 cv
cp
f
304.607 312.097 mo
272.881 312.097 li
272.576 312.097 272.329 311.85 272.329 311.545 cv
272.329 311.24 272.576 310.993 272.881 310.993 cv
304.607 310.993 li
304.913 310.993 305.159 311.24 305.159 311.545 cv
305.159 311.85 304.913 312.097 304.607 312.097 cv
cp
f
304.607 303.288 mo
272.881 303.288 li
272.576 303.288 272.329 303.041 272.329 302.736 cv
272.329 302.431 272.576 302.184 272.881 302.184 cv
304.607 302.184 li
304.913 302.184 305.159 302.431 305.159 302.736 cv
305.159 303.041 304.913 303.288 304.607 303.288 cv
cp
f
346.659 307.692 mo
319.211 307.692 li
318.906 307.692 318.659 307.445 318.659 307.141 cv
318.659 306.836 318.906 306.589 319.211 306.589 cv
346.659 306.589 li
346.964 306.589 347.21 306.836 347.21 307.141 cv
347.21 307.445 346.964 307.692 346.659 307.692 cv
cp
f
348.798 312.097 mo
317.072 312.097 li
316.766 312.097 316.52 311.85 316.52 311.545 cv
316.52 311.24 316.766 310.993 317.072 310.993 cv
348.798 310.993 li
349.103 310.993 349.35 311.24 349.35 311.545 cv
349.35 311.85 349.103 312.097 348.798 312.097 cv
cp
f
348.798 303.288 mo
317.072 303.288 li
316.766 303.288 316.52 303.041 316.52 302.736 cv
316.52 302.431 316.766 302.184 317.072 302.184 cv
348.798 302.184 li
349.103 302.184 349.35 302.431 349.35 302.736 cv
349.35 303.041 349.103 303.288 348.798 303.288 cv
cp
f
322.887 370.388 mo
294.937 370.388 li
294.632 370.388 294.385 370.141 294.385 369.836 cv
294.385 369.531 294.632 369.284 294.937 369.284 cv
322.887 369.284 li
323.192 369.284 323.439 369.531 323.439 369.836 cv
323.439 370.141 323.192 370.388 322.887 370.388 cv
cp
f
325.192 374.792 mo
293.052 374.792 li
292.747 374.792 292.5 374.546 292.5 374.241 cv
292.5 373.935 292.747 373.689 293.052 373.689 cv
325.192 373.689 li
325.497 373.689 325.744 373.935 325.744 374.241 cv
325.744 374.546 325.497 374.792 325.192 374.792 cv
cp
f
325.192 365.983 mo
293.052 365.983 li
292.747 365.983 292.5 365.736 292.5 365.431 cv
292.5 365.126 292.747 364.879 293.052 364.879 cv
325.192 364.879 li
325.497 364.879 325.744 365.126 325.744 365.431 cv
325.744 365.736 325.497 365.983 325.192 365.983 cv
cp
f
349.701 253.534 mo
349.624 252.872 349.525 252.21 349.426 251.536 cv
348.057 242.387 345.464 232.786 340.773 224.443 cv
338.787 220.922 337.142 217.954 335.774 215.449 cv
335.487 214.93 335.222 214.433 334.957 213.959 cv
328.567 202.15 328.887 201.135 328.214 195.341 cv
327.949 193.045 329.24 186.932 330.852 179.217 cv
330.929 178.809 331.006 178.401 331.095 177.992 cv
331.238 177.849 li
353.465 154.64 li
333.18 129.39 li
333.18 129.39 330.024 132.237 324.572 134.72 cv
324.241 134.874 323.888 135.029 323.535 135.172 cv
319.904 136.706 315.357 138.02 310.148 138.273 cv
304.034 137.976 298.847 136.221 294.941 134.356 cv
294.587 134.19 294.256 134.025 293.925 133.859 cv
289.577 131.619 287.105 129.39 287.105 129.39 cv
266.832 154.64 li
288.418 177.176 li
289.191 177.981 li
289.257 178.279 289.312 178.566 289.378 178.853 cv
291.012 186.744 292.347 193.001 292.071 195.341 cv
291.409 201.08 291.718 202.139 285.505 213.65 cv
285.24 214.135 284.964 214.654 284.666 215.184 cv
284.666 215.195 li
283.264 217.755 281.576 220.801 279.523 224.443 cv
275.517 231.572 273.034 239.617 271.555 247.519 cv
271.412 248.237 271.279 248.954 271.169 249.671 cv
267.891 269.227 270.418 287.26 270.418 287.26 cv
349.878 287.26 li
349.878 287.26 352.085 271.545 349.701 253.545 cv
349.701 253.534 li
cp
.968627 .74902 .74902 rgb
f
310.501 255.322 mo
310.446 255.421 310.38 255.487 310.292 255.542 cv
310.148 255.598 li
310.005 255.62 li
309.861 255.598 li
309.718 255.542 li
292.733 246.923 286.608 225.105 284.666 215.195 cv
284.666 215.184 li
284.964 214.654 285.24 214.135 285.505 213.65 cv
287.094 222.567 292.789 245.566 310.016 254.439 cv
310.259 254.571 li
310.523 254.715 310.634 255.046 310.501 255.322 cv
cp
.807843 .568627 .568627 rgb
f
335.774 215.449 mo
333.622 225.48 327.133 247.012 310.292 255.542 cv
310.259 255.565 li
310.148 255.598 li
310.005 255.62 li
309.905 255.62 309.806 255.598 309.718 255.542 cv
309.63 255.487 309.563 255.421 309.519 255.322 cv
309.376 255.046 309.486 254.715 309.762 254.571 cv
310.016 254.439 li
327.033 245.654 333.136 223.096 334.957 213.959 cv
335.222 214.433 335.487 214.93 335.774 215.449 cv
cp
f
311.461 286.708 mo
311.406 286.896 311.263 287.028 311.097 287.072 cv
310.932 287.105 li
310.766 287.072 li
285.714 279.281 275.23 260.487 271.169 249.671 cv
271.279 248.954 271.412 248.237 271.555 247.519 cv
275.021 257.661 284.986 277.824 310.932 285.969 cv
311.097 286.024 li
311.384 286.112 311.55 286.421 311.461 286.708 cv
cp
f
349.701 253.534 mo
349.701 253.545 li
344.481 264.504 333.412 280.087 311.219 287.028 cv
311.097 287.072 li
310.932 287.105 li
310.766 287.072 li
310.601 287.028 310.457 286.896 310.402 286.708 cv
310.314 286.421 310.479 286.112 310.766 286.024 cv
310.932 285.969 li
333.787 278.795 344.625 262.297 349.426 251.536 cv
349.525 252.21 349.624 252.872 349.701 253.534 cv
cp
f
289.632 177.452 mo
289.765 177.893 289.654 178.367 289.378 178.853 cv
289.312 178.566 288.418 177.176 288.418 177.176 cv
285.019 164.054 291.552 141.342 293.925 133.859 cv
294.256 134.025 294.587 134.19 294.941 134.356 cv
292.546 142.037 286.034 164.992 289.632 177.452 cv
cp
f
331.205 177.562 mo
331.183 177.65 331.194 177.749 331.238 177.849 cv
331.238 177.849 330.929 178.809 330.852 179.217 cv
330.278 178.577 329.969 177.948 330.134 177.297 cv
333.136 165.113 326.404 143.471 323.535 135.172 cv
323.888 135.029 324.241 134.874 324.572 134.72 cv
327.475 143.052 334.328 164.881 331.205 177.562 cv
cp
f
313.055 107.76 mo
305.813 107.76 li
305.813 106.668 li
313.055 106.668 li
313.055 107.76 li
cp
.988235 .627451 .329412 rgb
f
308.166 103.3 mo
308.166 106.895 li
308.166 109.483 305.014 111.583 301.132 111.583 cv
298.391 111.583 li
297.443 111.583 296.546 111.455 295.713 111.233 cv
295.521 111.173 295.328 111.114 295.136 111.045 cv
294.098 110.687 293.214 110.157 292.561 109.517 cv
292.433 109.38 292.305 109.244 292.189 109.107 cv
291.664 108.441 291.357 107.689 291.357 106.895 cv
291.357 104.032 li
291.357 103.628 291.719 103.3 292.167 103.3 cv
308.166 103.3 li
cp
.219608 .219608 .219608 rgb
f
327.088 103.3 mo
327.544 103.3 327.913 103.647 327.913 104.076 cv
327.913 106.87 li
327.913 109.474 324.804 111.583 320.964 111.583 cv
318.194 111.583 li
317.401 111.583 316.645 111.498 315.94 111.327 cv
315.739 111.284 315.537 111.233 315.348 111.165 cv
314.303 110.857 313.397 110.371 312.692 109.756 cv
312.553 109.636 312.427 109.508 312.302 109.372 cv
311.622 108.646 311.231 107.792 311.231 106.87 cv
311.231 103.3 li
327.088 103.3 li
cp
f
327.172 104.943 mo
292.098 104.943 li
291.689 104.943 291.357 104.611 291.357 104.202 cv
291.357 104.044 li
291.357 103.634 291.689 103.302 292.098 103.302 cv
327.172 103.302 li
327.582 103.302 327.913 103.634 327.913 104.044 cv
327.913 104.202 li
327.913 104.611 327.582 104.943 327.172 104.943 cv
cp
.988235 .627451 .329412 rgb
f
305.571 351.455 mo
302.006 351.62 li
301.719 341.633 li
301.719 341.633 298.596 348.784 293.155 351.433 cv
290.021 352.956 275.321 353.32 267.53 353.419 cv
266.735 353.43 269.163 350.495 273.312 349.325 cv
276.38 348.475 278.731 347.261 280.53 345.915 cv
280.541 345.915 li
280.695 345.793 li
280.762 345.749 280.85 345.683 280.96 345.606 cv
281.038 345.551 281.137 345.484 281.236 345.407 cv
281.325 345.341 281.435 345.264 281.556 345.186 cv
282.583 344.447 284.205 343.244 285.717 341.964 cv
285.971 341.754 286.225 341.533 286.478 341.313 cv
287.626 340.353 288.641 339.414 289.237 338.697 cv
290.672 336.964 293.078 335.133 294.248 333.874 cv
295.142 332.903 296.014 332.098 296.841 331.413 cv
300.704 329.372 li
300.704 329.372 303.772 327.882 304.235 328.665 cv
304.291 328.765 304.346 328.864 304.39 328.996 cv
306.465 333.532 305.571 351.455 305.571 351.455 cv
cp
.0666667 .0666667 .0666667 rgb
f
304.39 328.996 mo
304.224 333.311 288.84 345.904 280.541 345.915 cv
280.695 345.793 li
280.762 345.749 280.85 345.683 280.96 345.606 cv
281.038 345.551 281.126 345.484 281.236 345.407 cv
281.325 345.341 281.435 345.264 281.556 345.186 cv
282.572 344.436 284.183 343.211 285.717 341.964 cv
285.971 341.754 286.225 341.533 286.478 341.313 cv
287.626 340.353 288.641 339.414 289.237 338.697 cv
290.672 336.964 293.078 335.133 294.248 333.874 cv
295.142 332.903 296.014 332.098 296.841 331.413 cv
301.068 327.948 304.224 327.904 304.368 328.588 cv
304.39 328.721 304.401 328.842 304.39 328.996 cv
cp
.741176 .647059 .807843 rgb
f
328.941 335.115 mo
326.563 335.132 324.666 337.086 324.702 339.464 cv
324.753 342.849 325.117 347.471 326.547 350.451 cv
327.004 351.403 327.747 352.771 328.624 353.642 cv
329.356 354.37 331.225 354.486 332.033 353.843 cv
333.107 352.988 334.116 351.529 334.656 350.477 cv
336.211 347.451 336.489 342.711 336.451 339.285 cv
336.424 336.946 334.492 335.076 332.152 335.092 cv
328.941 335.115 li
cp
.0666667 .0666667 .0666667 rgb
f
335.313 338.653 mo
335.214 340.628 334.375 344.392 332.73 346.798 cv
331.803 348.155 329.817 348.221 328.768 346.952 cv
323.747 340.882 325.833 336.214 325.689 330.928 cv
325.689 330.762 325.689 330.608 325.678 330.442 cv
325.656 330.122 325.667 327.352 326.926 325.851 cv
329.199 323.158 333.547 323.898 334.772 327.198 cv
335.158 328.246 335.225 329.383 335.214 329.846 cv
335.214 330.928 li
335.236 333.599 335.49 334.647 335.313 338.653 cv
cp
.741176 .647059 .807843 rgb
f
335.214 329.846 mo
335.214 330.928 li
335.214 330.928 332.969 327.393 330.578 327.41 cv
327.377 327.433 325.689 330.928 325.689 330.928 cv
325.689 330.762 325.689 330.608 325.678 330.442 cv
325.656 330.122 325.667 327.352 326.926 325.851 cv
329.199 323.158 333.547 323.898 334.772 327.198 cv
335.158 328.246 335.225 329.383 335.214 329.846 cv
cp
.0666667 .0666667 .0666667 rgb
f
452.408 113.947 mo
452.408 113.947 466.578 130.315 456.093 153.208 cv
475.789 135.68 li
475.789 135.68 468.825 122.437 471.758 108.294 cv
472.83 103.128 452.408 113.947 452.408 113.947 cv
1 .741176 .611765 rgb
f
462.301 114.811 mo
462.309 114.666 456.39 120.442 456.39 120.442 cv
457.553 123.191 li
457.553 123.191 462.117 118.444 462.301 114.811 cv
.768627 .513726 .384314 rgb
f
89.9033 229.622 mo
93.3908 233.11 94.7432 237.136 93.0451 238.834 cv
91.347 240.532 87.2416 239.259 83.7541 235.772 cv
80.2666 232.284 77.8969 227.91 79.5949 226.212 cv
81.293 224.514 86.4159 226.135 89.9033 229.622 cv
cp
.207843 .215686 .309804 rgb
f
82.3306 228.862 mo
82.3306 228.862 77.1992 231.927 75.6868 231.942 cv
72.2873 231.977 72.8711 234.14 74.1759 234.209 cv
75.4808 234.277 81.181 233.59 81.181 233.59 cv
83.4473 230.637 li
82.3306 228.862 li
cp
.768627 .513726 .384314 rgb
f
92.4657 232.577 mo
92.4657 232.577 89.9274 238.889 86.738 243.182 cv
85.9434 244.242 85.1157 245.18 84.277 245.864 cv
84.1115 245.997 83.9569 246.118 83.7914 246.228 cv
82.3678 247.221 81.3525 245.809 79.8515 245.092 cv
77.7326 244.076 76.331 243.425 75.4923 242.752 cv
74.5983 242.035 74.3666 241.295 74.6315 240.059 cv
74.6315 240.037 li
74.6756 239.794 li
74.7308 239.551 74.6866 239.386 74.5983 239.275 cv
74.3445 238.956 73.7927 238.978 74.3115 238.359 cv
74.7087 237.896 75.2605 237.256 75.9007 236.483 cv
79.5756 232.08 86.4069 223.726 86.4069 223.726 cv
92.4657 232.577 li
cp
f
113.622 197.372 mo
108.622 221.927 93.4479 238.415 93.4479 238.415 cv
93.4479 238.415 92.755 233.754 88.0789 230.074 cv
83.8714 226.763 79.5949 226.212 79.5949 226.212 cv
85.4993 222.283 95.7765 192.626 96.9132 188.168 cv
97.0015 187.826 97.0457 187.649 97.0457 187.649 cv
97.0457 187.649 97.0236 187.439 96.9905 187.064 cv
96.6152 183.323 94.5736 162.674 94.1984 153.492 cv
93.0947 126.818 94.1307 117.8 103.513 114.281 cv
114.823 110.039 118.621 172.816 113.622 197.372 cv
cp
1 .87451 .741176 rgb
f
189.373 423.597 mo
189.373 423.597 185.728 426.463 175.473 427.207 cv
163.444 428.079 161.611 426.22 161.611 426.22 cv
156.633 327.948 li
139.622 241.842 li
148.47 242.798 li
164.432 232.54 li
168.893 221.775 li
183.771 325.012 li
189.373 423.597 li
.411765 .270588 .509804 rgb
f
109.819 238.087 mo
109.445 422.035 li
135.402 423.408 li
141.598 242.743 li
115.43 229.435 li
109.819 238.087 li
f
170.372 247.76 mo
170.101 249.846 154.581 256.6 138.404 255.979 cv
122.227 255.358 109.097 249.754 109.819 238.087 cv
111.288 214.326 109.788 207.624 119.031 210.387 cv
129.3 213.458 167.474 206.804 167.474 206.804 cv
167.474 206.804 170.88 243.843 170.372 247.76 cv
f
180.644 424.957 mo
175.245 326.451 li
162.917 252.012 li
163.278 251.879 163.629 251.746 163.969 251.613 cv
176.34 326.331 li
181.746 424.896 li
180.644 424.957 li
.247059 .168627 .301961 rgb
f
155.732 208.625 mo
155.342 206.269 li
156.431 206.089 li
156.825 208.469 li
156.466 208.521 156.103 208.573 155.732 208.625 cv
.568627 .568627 .568627 rgb
f
162.917 252.012 mo
155.732 208.625 li
156.103 208.573 156.466 208.521 156.825 208.469 cv
163.969 251.613 li
163.629 251.746 163.278 251.879 162.917 252.012 cv
.247059 .168627 .301961 rgb
f
170.507 138.958 mo
164.593 204.142 li
112.391 207.845 li
111.784 207.889 li
111.663 206.465 li
103.485 114.292 li
136.384 105.298 li
163.378 108.808 li
170.507 138.958 li
cp
1 .87451 .741176 rgb
f
112.286 207.845 mo
112.198 208.088 li
111.679 207.889 li
111.558 206.465 li
115.84 191.048 111.393 133.263 110.267 131.001 cv
110.267 131.001 110.164 130.229 110.34 130.078 cv
110.84 129.647 111.254 130.388 111.254 130.388 cv
112.7 131.68 117.142 193.973 112.286 207.845 cv
cp
.988235 .627451 .329412 rgb
f
104.627 187.814 mo
104.616 188.124 104.352 188.366 104.053 188.344 cv
102.508 188.289 99.5398 188.19 96.9132 188.168 cv
97.0015 187.826 97.0236 187.439 96.9905 187.064 cv
100.29 187.086 103.855 187.23 104.109 187.241 cv
104.407 187.252 104.649 187.505 104.627 187.814 cv
cp
f
133.408 205.429 mo
132.041 112.842 li
133.133 112.008 li
134.511 205.413 li
133.408 205.429 li
cp
f
145.578 205.429 mo
144.255 108.419 li
145.25 108.419 li
146.682 205.413 li
145.578 205.429 li
cp
f
127.794 85.4072 mo
129.383 93.4224 127.496 100.95 124.331 106.548 cv
122.459 109.859 125.137 113.875 128.899 113.312 cv
152.244 109.819 li
152.244 109.819 139.24 93.8071 143.253 81.1567 cv
127.113 82.1463 li
127.113 82.1463 127.345 83.1378 127.794 85.4072 cv
cp
1 .741176 .611765 rgb
f
129.439 91.7986 mo
129.439 91.7986 139.412 94.1065 142.508 90.6665 cv
143.006 89.7786 li
143.676 92.1173 141.512 95.6185 138.523 96.0324 cv
135.258 96.4844 131.63 95.4997 129.439 91.7986 cv
cp
.768627 .513726 .384314 rgb
f
131.633 91.503 mo
120.552 92.1872 114.141 79.8379 110.863 68.9343 cv
109.98 66.0208 109.329 63.1956 108.876 60.7676 cv
108.832 60.4917 li
106.768 49.1246 109.914 41.267 120.343 39.0156 cv
134.778 35.9035 144.997 42.0836 147.16 53.5832 cv
149.312 65.0938 159.543 89.7814 131.633 91.503 cv
cp
.176471 .176471 .176471 rgb
f
148.533 67.4122 mo
150.779 79.3936 146.426 92.6127 137.839 94.2222 cv
129.252 95.8317 117.119 84.0186 114.873 72.0371 cv
112.628 60.0557 115.576 43.8348 124.163 42.2254 cv
132.75 40.6159 146.287 55.4308 148.533 67.4122 cv
cp
1 .741176 .611765 rgb
f
155.735 107.825 mo
151.056 115.021 li
137.603 112.196 li
125.254 116.202 li
118.257 110.231 li
121.049 107.958 li
121.899 107.251 li
125.519 104.305 li
125.519 104.305 141.565 107.251 147.083 101.866 cv
152.855 105.839 li
153.76 106.468 li
155.735 107.825 li
cp
.968627 .968627 .968627 rgb
f
135.114 78.3977 mo
134.92 78.3174 li
134.812 78.2101 134.811 78.0355 134.919 77.9272 cv
135.464 77.3776 136.092 76.8635 136.647 76.4103 cv
137.131 76.0132 137.722 75.5303 137.878 75.2938 cv
134.624 74.2155 132.7 71.4414 132.7 67.8445 cv
132.7 67.692 132.824 67.5686 132.976 67.5686 cv
133.129 67.5686 133.252 67.692 133.252 67.8445 cv
133.252 71.2183 135.063 73.8119 138.096 74.7819 cv
138.367 74.8686 138.44 75.0475 138.459 75.1461 cv
138.537 75.5567 138.067 75.9614 136.996 76.8371 cv
136.452 77.2822 135.835 77.7866 135.31 78.3163 cv
135.114 78.3977 li
cp
.768627 .513726 .384314 rgb
f
139.75 125.834 mo
139.75 127.424 139.183 128.713 138.483 128.713 cv
137.783 128.713 137.215 127.424 137.215 125.834 cv
137.215 124.244 137.783 122.956 138.483 122.956 cv
139.183 122.956 139.75 124.244 139.75 125.834 cv
cp
.286275 .286275 .286275 rgb
f
140.386 141.826 mo
140.386 143.415 139.819 144.704 139.118 144.704 cv
138.418 144.704 137.851 143.415 137.851 141.826 cv
137.851 140.236 138.418 138.947 139.118 138.947 cv
139.819 138.947 140.386 140.236 140.386 141.826 cv
cp
f
141.022 157.817 mo
141.022 159.407 140.454 160.696 139.754 160.696 cv
139.054 160.696 138.486 159.407 138.486 157.817 cv
138.486 156.227 139.054 154.939 139.754 154.939 cv
140.454 154.939 141.022 156.227 141.022 157.817 cv
cp
f
141.657 173.809 mo
141.657 175.398 141.09 176.687 140.39 176.687 cv
139.69 176.687 139.122 175.398 139.122 173.809 cv
139.122 172.219 139.69 170.93 140.39 170.93 cv
141.09 170.93 141.657 172.219 141.657 173.809 cv
cp
f
142.293 189.88 mo
142.293 191.47 141.726 192.759 141.025 192.759 cv
140.325 192.759 139.758 191.47 139.758 189.88 cv
139.758 188.29 140.325 187.002 141.025 187.002 cv
141.726 187.002 142.293 188.29 142.293 189.88 cv
cp
f
120.829 75.8796 mo
124.646 78.7318 126.802 82.2973 125.647 83.8433 cv
124.492 85.3894 120.461 84.3305 116.645 81.4782 cv
112.828 78.626 110.672 75.0605 111.827 73.5145 cv
112.982 71.9684 117.013 73.0273 120.829 75.8796 cv
cp
1 .741176 .611765 rgb
f
112.945 76.0999 mo
112.849 76.0999 112.756 76.0498 112.705 75.9604 cv
112.372 75.3735 112.309 74.8595 112.519 74.4321 cv
112.866 73.7251 113.831 73.5796 113.872 73.5737 cv
114.013 73.5538 114.161 73.6562 114.183 73.807 cv
114.205 73.9579 114.101 74.0975 113.95 74.1201 cv
113.751 74.1498 113.194 74.3071 113.014 74.6768 cv
112.89 74.93 112.948 75.2701 113.185 75.6877 cv
113.26 75.8203 113.214 75.9889 113.081 76.0638 cv
112.945 76.0999 li
cp
.768627 .513726 .384314 rgb
f
118.268 80.7558 mo
118.19 80.7444 li
116.277 80.1819 113.813 77.5721 113.709 77.4611 cv
113.605 77.3501 113.611 77.1755 113.722 77.0715 cv
113.832 76.967 114.008 76.9713 114.111 77.0839 cv
114.136 77.1098 116.576 79.6947 118.345 80.2153 cv
118.492 80.2584 118.575 80.4114 118.532 80.5575 cv
118.497 80.6782 118.387 80.7558 118.268 80.7558 cv
cp
f
150.933 71.6271 mo
150.08 76.3146 147.85 79.8344 145.951 79.4888 cv
144.052 79.1433 143.204 75.0633 144.057 70.3758 cv
144.91 65.6884 147.141 62.1686 149.04 62.5141 cv
150.938 62.8597 151.786 66.9397 150.933 71.6271 cv
cp
1 .741176 .611765 rgb
f
149.891 66.0802 mo
149.884 66.0802 li
149.732 66.0764 149.612 65.9498 149.615 65.7978 cv
149.62 65.5963 149.558 65.0208 149.225 64.7804 cv
148.995 64.6161 148.65 64.615 148.199 64.7783 cv
148.053 64.8273 147.898 64.7557 147.845 64.6123 cv
147.793 64.469 147.868 64.3106 148.011 64.2588 cv
148.646 64.0303 149.163 64.0551 149.55 64.3348 cv
150.188 64.7966 150.168 65.7714 150.167 65.8124 cv
150.162 65.9622 150.039 66.0802 149.891 66.0802 cv
cp
.768627 .513726 .384314 rgb
f
149.044 73.5565 mo
148.892 73.5107 li
148.765 73.4266 148.73 73.2552 148.814 73.1281 cv
149.832 71.5901 150.031 68.0411 150.033 68.0056 cv
150.041 67.8542 150.174 67.7291 150.323 67.7448 cv
150.475 67.7528 150.592 67.8827 150.584 68.0347 cv
150.576 68.1866 150.375 71.7696 149.274 73.4331 cv
149.044 73.5565 li
cp
f
145.294 60.1641 mo
144.988 59.4757 138.622 59.0951 136.085 60.9298 cv
133.549 62.7645 134.214 64.9125 134.718 64.3852 cv
135.222 63.8578 137.928 62.129 139.582 61.8045 cv
141.236 61.4799 145.495 60.6179 145.294 60.1641 cv
cp
.176471 .176471 .176471 rgb
f
116.356 70.2315 mo
116.162 69.5035 120.885 65.2175 124.011 65.0579 cv
127.138 64.8983 127.965 66.9892 127.242 66.8938 cv
126.519 66.7984 123.327 67.1468 121.835 67.9306 cv
120.342 68.7144 116.483 70.7114 116.356 70.2315 cv
cp
f
143.062 65.3215 mo
138.198 66.8669 li
138.623 68.0402 li
143.77 65.9642 li
143.062 65.3215 li
cp
f
140.77 68.4821 mo
141.182 69.5929 142.049 70.2955 142.708 70.0514 cv
143.367 69.8075 143.568 68.7093 143.157 67.5984 cv
142.745 66.4877 141.878 65.7851 141.219 66.029 cv
140.56 66.273 140.359 67.3713 140.77 68.4821 cv
cp
f
121.037 72.5301 mo
125.576 70.1996 li
126.102 71.3315 li
120.987 73.4857 li
121.037 72.5301 li
cp
f
126.01 72.8279 mo
126.398 73.9469 126.175 75.0408 125.511 75.2713 cv
124.847 75.5018 123.994 74.7816 123.606 73.6626 cv
123.217 72.5436 123.44 71.4498 124.104 71.2192 cv
124.768 70.9887 125.621 71.7089 126.01 72.8279 cv
cp
f
134.373 84.5925 mo
133.121 84.5925 132.16 84.3969 132.095 84.3834 cv
131.946 84.3522 131.85 84.2061 131.882 84.0574 cv
131.912 83.9081 132.058 83.8084 132.208 83.8435 cv
132.234 83.8489 134.729 84.3549 136.866 83.7115 cv
139.6 82.8875 140.989 81.1017 141.003 81.0839 cv
141.094 80.9632 141.268 80.9384 141.389 81.0317 cv
141.51 81.1238 141.534 81.2968 141.442 81.418 cv
141.382 81.4967 139.94 83.3617 137.025 84.2395 cv
136.128 84.5095 135.189 84.5925 134.373 84.5925 cv
cp
.768627 .513726 .384314 rgb
f
136.919 87.0982 mo
136.135 87.0982 135.572 86.8617 135.561 86.8568 cv
135.421 86.7959 135.358 86.6337 135.418 86.4942 cv
135.478 86.3535 135.641 86.291 135.78 86.3503 cv
135.862 86.3842 137.804 87.1877 139.359 85.3744 cv
139.459 85.2585 139.634 85.2456 139.748 85.3442 cv
139.864 85.4434 139.877 85.6174 139.778 85.7333 cv
138.838 86.831 137.753 87.0982 136.919 87.0982 cv
cp
f
70.4603 286.979 mo
69.4236 286.602 li
70.9922 282.294 73.437 277.272 75.8016 272.416 cv
79.8949 264.007 84.1271 255.313 84.0129 250.016 cv
83.911 245.269 82.4631 241.518 80.0398 239.727 cv
78.4803 238.572 76.5673 238.27 74.5067 238.855 cv
65.2613 241.472 53.3394 278.816 53.0527 280.535 cv
51.9642 280.354 li
52.2784 278.468 64.0801 240.659 74.206 237.792 cv
76.6072 237.113 78.8516 237.475 80.6962 238.839 cv
83.4358 240.865 85.0055 244.826 85.1165 249.992 cv
85.2361 255.557 80.9446 264.373 76.7937 272.899 cv
74.442 277.73 72.0096 282.725 70.4603 286.979 cv
cp
.266667 .176471 .329412 rgb
f
43.0621 289.329 mo
39.9278 333.164 li
39.8175 334.61 li
39.8064 334.797 li
39.5416 334.654 li
39.1995 334.455 li
39.1001 334.4 li
26.0887 327.138 li
25.4706 326.796 li
25.8128 326.068 li
43.0621 289.329 li
cp
.411765 .270588 .509804 rgb
f
39.9278 333.164 mo
39.8175 334.61 li
39.8064 334.797 li
39.5416 334.654 li
39.1995 334.455 li
39.1001 334.4 li
39.0781 334.257 li
35.9218 323.187 li
26.0887 327.138 li
25.4706 326.796 li
25.8128 326.068 li
36.0763 321.929 li
36.2197 321.874 36.3853 321.885 36.5288 321.951 cv
36.6612 322.018 36.7715 322.139 36.8157 322.293 cv
39.9278 333.164 li
cp
.266667 .176471 .329412 rgb
f
108.241 335.393 mo
48.6463 337.898 li
48.0945 337.92 li
48.1497 336.718 li
48.1497 336.707 li
50.5776 278.05 li
102.171 275.203 li
108.241 335.393 li
cp
1 .85098 .85098 rgb
f
50.5776 278.05 mo
48.1497 336.707 li
48.1497 336.718 li
48.0945 337.92 li
47.4765 337.887 li
40.2369 337.446 li
39.6188 337.413 li
39.7072 336.21 li
43.8677 278.05 li
50.5776 278.05 li
cp
.768627 .580392 .580392 rgb
f
66.9378 281.734 mo
66.0034 281.146 li
67.0504 279.483 67.1749 273.74 67.3063 267.661 cv
67.5618 255.847 67.8797 241.145 74.5223 239.265 cv
76.8928 238.593 79.1814 239.006 81.1434 240.458 cv
84.1093 242.651 85.8736 246.864 85.9846 252.015 cv
86.0369 254.453 85.8752 257.202 85.7039 260.113 cv
85.2808 267.317 84.8007 275.482 87.5813 281.025 cv
86.5952 281.521 li
83.6815 275.713 84.1708 267.39 84.6024 260.049 cv
84.7722 257.16 84.9327 254.433 84.881 252.039 cv
84.7792 247.302 83.1367 243.304 80.4871 241.345 cv
78.8096 240.104 76.8492 239.75 74.823 240.327 cv
68.9655 241.985 68.6438 256.838 68.4094 267.685 cv
68.2628 274.46 68.147 279.811 66.9378 281.734 cv
cp
f
84.7515 245.445 mo
83.7914 246.228 li
82.6878 247.001 81.529 247.398 80.3702 247.199 cv
80.1826 247.166 79.995 247.122 79.8074 247.056 cv
79.6639 247.012 79.5094 246.945 79.3659 246.879 cv
78.5382 246.482 77.8099 246.052 77.1808 245.61 cv
77.0263 245.511 76.8828 245.411 76.7504 245.29 cv
75.9007 244.65 75.2495 243.955 74.797 243.249 cv
74.6646 243.072 74.5653 242.884 74.477 242.697 cv
73.87 241.538 73.7597 240.346 74.0356 239.198 cv
74.2673 238.58 74.6167 237.742 74.9219 237.455 cv
75.588 236.826 76.6303 235.321 77.5717 234.926 cv
78.3229 234.609 79.0329 234.696 79.079 236.285 cv
79.3328 236.23 79.6673 236.356 79.8405 236.185 cv
82.193 233.868 82.785 235.696 82.0919 237.046 cv
82.1802 237.179 li
82.2574 237.311 82.2468 237.718 82.4008 237.62 cv
84.6531 236.185 83.8024 239.202 83.4051 240.037 cv
83.2941 240.27 83.659 240.522 83.659 240.787 cv
83.659 240.903 85.321 239.734 85.6693 240.413 cv
86.6994 242.421 84.7036 244.755 84.7515 245.445 cv
cp
1 .741176 .611765 rgb
f
68.8097 282.684 mo
68.8097 284.377 67.9939 285.75 66.9876 285.75 cv
65.9813 285.75 65.1656 284.377 65.1656 282.684 cv
65.1656 280.99 65.9813 279.617 66.9876 279.617 cv
67.9939 279.617 68.8097 280.99 68.8097 282.684 cv
cp
.768627 .580392 .580392 rgb
f
88.847 282.684 mo
88.847 284.377 88.0312 285.75 87.0249 285.75 cv
86.0186 285.75 85.2029 284.377 85.2029 282.684 cv
85.2029 280.99 86.0186 279.617 87.0249 279.617 cv
88.0312 279.617 88.847 280.99 88.847 282.684 cv
cp
f
48.1497 336.707 mo
48.1497 336.718 li
48.0945 337.92 li
47.4765 337.887 li
44.265 330.913 li
40.2369 337.446 li
39.6188 337.413 li
39.7072 336.21 li
43.8567 329.456 li
43.967 329.279 44.1657 329.169 44.3643 329.191 cv
44.563 329.202 44.7506 329.323 44.8278 329.511 cv
48.1497 336.707 li
cp
.407843 .282353 .282353 rgb
f
86.4506 293.169 mo
68.2444 293.745 li
68.1311 290.16 li
86.3372 289.584 li
86.4506 293.169 li
cp
1 1 1 rgb
f
gsave
113.901 422.271 mo
113.365 422.259 li
113.365 422.242 li
113.901 422.271 li
clp
113.365 422.242 mo
113.901 422.242 li
113.901 422.271 li
113.365 422.271 li
cp
.568627 .568627 .568627 rgb
f
grestore
114.469 422.283 mo
113.901 422.271 li
113.365 422.242 li
117.015 250.729 li
117.368 250.945 117.732 251.155 118.106 251.359 cv
114.469 422.283 li
.247059 .168627 .301961 rgb
f
118.106 251.359 mo
117.732 251.155 117.368 250.945 117.015 250.729 cv
117.858 211.115 li
118.962 211.138 li
118.106 251.359 li
f
111.293 215.276 mo
112.029 215.092 168.893 210.969 168.893 210.969 cv
168.313 202.613 li
111.619 207.247 li
111.293 215.276 li
cp
.0666667 .0666667 .0666667 rgb
f
128.152 214.625 mo
125.261 214.808 li
124.712 206.15 li
127.604 205.967 li
128.152 214.625 li
cp
.411765 .270588 .509804 rgb
f
162.757 211.834 mo
159.865 212.017 li
159.317 203.359 li
162.205 203.112 li
162.757 211.834 li
cp
f
154.138 212.515 mo
151.247 212.698 li
150.698 204.041 li
153.587 203.816 li
154.138 212.515 li
cp
f
117.57 215.265 mo
114.678 215.448 li
114.146 207.041 li
117.034 206.804 li
117.57 215.265 li
cp
f
146.13 212.841 mo
136.152 213.594 li
135.626 205.295 li
145.6 204.479 li
146.13 212.841 li
cp
.988235 .627451 .329412 rgb
f
175.887 222.004 mo
175.876 222.49 175.854 222.953 175.832 223.406 cv
175.832 223.428 li
175.666 226.573 175.236 229.233 174.331 230.701 cv
174.32 230.712 li
174.221 230.91 174.099 231.087 173.956 231.23 cv
173.845 231.352 li
173.26 231.97 172.72 232.223 172.234 232.179 cv
172.069 232.157 171.903 232.113 171.749 232.014 cv
168.714 230.369 167.853 216.431 166.97 213.694 cv
165.955 210.505 167.886 217.468 166.021 219.367 cv
164.597 220.801 164.487 200.87 164.487 200.87 cv
165.348 200.914 li
170.711 201.201 li
174.475 201.4 li
174.475 201.4 174.739 203.287 175.037 206.123 cv
175.192 207.547 175.346 209.213 175.49 210.99 cv
175.376 211.03 li
175.398 211.13 li
175.42 211.406 175.556 211.652 175.578 211.939 cv
175.733 214.08 175.854 216.376 175.898 218.605 cv
175.909 219.753 175.92 220.9 175.887 222.004 cv
cp
1 .741176 .611765 rgb
f
173.601 219.457 mo
173.845 231.349 li
173.958 231.234 li
174.094 231.088 174.22 230.913 174.325 230.716 cv
174.329 230.704 li
174.087 219.339 li
174.082 219.166 173.972 219.059 173.836 219.099 cv
173.701 219.14 173.592 219.296 173.601 219.457 cv
cp
.768627 .513726 .384314 rgb
f
171.49 219.552 mo
171.749 232.015 li
171.902 232.112 172.064 232.16 172.24 232.174 cv
171.984 219.437 li
171.975 219.276 171.865 219.169 171.73 219.209 cv
171.598 219.238 171.49 219.394 171.49 219.552 cv
cp
f
175.578 211.939 mo
175.49 211.983 175.401 212.005 175.302 212.005 cv
175.159 212.016 li
169.376 212.016 164.774 201.378 164.774 201.378 cv
164.774 201.378 164.961 201.157 165.348 200.914 cv
166.175 200.407 167.93 199.811 170.711 201.201 cv
172.4 202.051 173.989 204.059 175.037 206.123 cv
175.192 207.547 175.346 209.213 175.49 210.99 cv
175.49 210.99 175.556 211.652 175.578 211.939 cv
cp
f
197.109 176.326 mo
176.737 209.865 li
176.737 209.865 173.925 210.968 169.401 207.174 cv
167.811 205.842 164.443 200.992 164.443 200.992 cv
177.278 167.928 li
177.366 167.718 li
176.958 166.669 li
161.055 125.836 li
161.055 125.836 160.664 108.566 163.273 108.808 cv
191.846 111.455 197.109 176.326 197.109 176.326 cv
cp
1 .87451 .741176 rgb
f
169.59 148.301 mo
169.295 148.301 169.05 148.068 169.039 147.77 cv
169.036 147.702 168.775 140.913 168.321 134.213 cv
168.301 133.909 168.531 133.646 168.835 133.625 cv
169.137 133.623 169.402 133.834 169.423 134.138 cv
169.877 140.856 170.139 147.66 170.141 147.728 cv
170.153 148.033 169.916 148.289 169.611 148.3 cv
169.59 148.301 li
cp
.988235 .627451 .329412 rgb
f
109.445 422.035 mo
109.445 422.035 102.334 423.957 95.2834 425.835 cv
93.2837 426.367 91.8938 427.998 91.8948 429.873 cv
113.917 430.086 li
118.254 430.084 124.58 429.839 128.576 428.061 cv
128.46 429.853 li
135.939 429.849 li
135.797 423.972 li
135.74 421.634 132.687 422.27 130.085 422.271 cv
109.445 422.035 li
cp
.0470588 .0470588 .0470588 rgb
f
188.806 429.703 mo
163.452 430.243 li
163.447 430.044 li
163.364 426.117 164.616 425.026 167.393 423.139 cv
169.399 421.776 171.354 421.456 174.982 421.062 cv
178.624 420.667 180.103 420.688 183.104 421.838 cv
186.21 423.028 188.721 425.699 188.806 429.703 cv
cp
f
42.3422 300.636 mo
42.3422 299.533 li
49.0721 299.533 96.0765 297.68 104.381 297.003 cv
104.47 298.103 li
96.1541 298.782 49.0818 300.636 42.3422 300.636 cv
cp
.407843 .282353 .282353 rgb
f
183.557 169.34 mo
183.491 169.583 183.27 169.726 183.038 169.726 cv
182.873 169.704 li
177.278 167.928 li
176.958 166.669 li
183.204 168.656 li
183.491 168.744 183.656 169.053 183.557 169.34 cv
cp
.988235 .627451 .329412 rgb
f
153.76 106.468 mo
149.93 112.361 li
149.798 112.56 149.555 112.659 149.323 112.593 cv
137.25 109.381 li
126.225 113.873 li
126.015 113.917 li
125.85 113.917 125.684 113.84 125.585 113.707 cv
121.049 107.958 li
121.899 107.251 li
126.192 112.703 li
137.007 108.289 li
137.117 108.245 137.239 108.234 137.36 108.267 cv
149.224 111.423 li
152.855 105.839 li
153.76 106.468 li
cp
.717647 .639216 .776471 rgb
f
114.15 59.7399 mo
114.203 66.1899 li
112.616 67.4938 110.196 66.6978 109.716 64.7007 cv
109.379 63.2981 109.097 61.9584 108.868 60.7225 cv
109.008 60.6111 li
109.923 61.0872 110.851 59.3353 114.15 59.7399 cv
cp
.0980392 .0980392 .0980392 rgb
f
147.061 62.5003 mo
141.852 53.4949 li
141.731 53.2742 li
141.731 53.2742 141.554 53.3735 141.234 53.539 cv
137.813 55.4041 117.694 66.065 111.393 62.5003 cv
107.066 60.0614 101.526 52.7445 108.358 45.2841 cv
117.495 35.3185 134.303 37.9341 140.98 44.4674 cv
147.668 50.9897 146.355 51.8284 147.381 54.8192 cv
148.418 57.81 147.061 62.5003 147.061 62.5003 cv
cp
.176471 .176471 .176471 rgb
f
141.852 53.4949 mo
141.852 53.4949 141.554 53.3735 141.234 53.539 cv
141.863 52.3692 141.918 50.7911 141.399 48.8818 cv
141.355 48.7273 li
141.322 48.5728 141.422 48.4293 141.576 48.3963 cv
141.719 48.3742 141.863 48.4625 141.896 48.617 cv
141.929 48.7384 li
142.437 50.6255 142.415 52.2368 141.852 53.4949 cv
cp
.0862745 .0862745 .0862745 rgb
f
79.8405 236.185 mo
79.5977 236.516 79.2556 236.969 78.781 237.598 cv
77.567 239.209 75.7461 241.626 74.797 243.249 cv
74.6646 243.072 74.5653 242.884 74.477 242.697 cv
75.3489 241.251 76.7946 239.309 78.3396 237.267 cv
78.5934 236.925 78.8473 236.594 79.079 236.285 cv
79.3328 236.23 79.5977 236.196 79.8405 236.185 cv
cp
.768627 .513726 .384314 rgb
f
82.4008 237.62 mo
80.9993 239.938 78.3838 243.944 77.1808 245.61 cv
77.0263 245.511 76.8828 245.411 76.7504 245.29 cv
78.0085 243.568 80.8007 239.209 82.0919 237.046 cv
82.1802 237.179 li
82.2574 237.311 82.3236 237.455 82.4008 237.62 cv
cp
f
83.659 240.787 mo
82.8092 242.597 81.3525 245.467 80.3702 247.199 cv
80.1826 247.166 79.995 247.122 79.8074 247.056 cv
80.8669 245.191 82.6105 241.748 83.4051 240.037 cv
83.4934 240.28 83.5817 240.534 83.659 240.787 cv
cp
f
504.382 83.7199 mo
504.382 83.7199 510.01 94.1198 509.129 103.017 cv
507.716 117.289 493.331 117.415 493.331 117.415 cv
492.007 103.532 li
504.382 83.7199 li
cp
1 .741176 .611765 rgb
f
447.061 88.6988 mo
447.061 88.6988 442.29 122.031 450.903 122.031 cv
459.516 122.031 478.064 104.351 475.559 95.6854 cv
473.521 88.6387 450.818 83.4005 447.061 88.6988 cv
f
446.383 94.592 mo
446.383 94.592 444.382 105.528 441.015 106.261 cv
446.383 109.546 li
446.383 94.592 li
f
454.846 401.794 mo
454.846 402.556 454.239 403.174 453.478 403.174 cv
447.607 403.174 li
448.004 402.203 448.357 401.276 448.677 400.415 cv
453.478 400.415 li
454.239 400.415 454.846 401.033 454.846 401.794 cv
cp
.411765 .270588 .509804 rgb
f
451.867 406.573 mo
451.867 407.334 451.249 407.952 450.487 407.952 cv
445.455 407.952 li
445.918 407.014 446.349 406.087 446.746 405.193 cv
450.487 405.193 li
451.249 405.193 451.867 405.811 451.867 406.573 cv
cp
f
448.754 411.539 mo
448.754 412.301 448.136 412.918 447.375 412.918 cv
442.729 412.918 li
443.292 412.003 443.821 411.076 444.318 410.159 cv
447.375 410.159 li
448.136 410.159 448.754 410.778 448.754 411.539 cv
cp
f
505.899 402.103 mo
505.899 406.374 504.332 410.126 501.452 412.201 cv
501.352 412.289 501.033 412.706 500.922 412.772 cv
499.455 413.754 497.633 413.967 495.823 413.967 cv
494.201 413.967 492.656 413.514 491.298 412.698 cv
491.254 412.676 li
491.243 412.676 li
487.977 410.711 485.747 406.716 485.747 402.103 cv
485.747 398.285 489.93 391.95 489.93 391.95 cv
489.93 391.95 493.506 392.182 495.823 392.182 cv
498.141 392.182 501.948 391.586 501.948 391.586 cv
501.948 391.586 505.899 398.285 505.899 402.103 cv
cp
.694118 .521569 .776471 rgb
f
467.03 413.868 mo
467.052 414.166 466.898 416.279 466.898 416.279 cv
466.666 416.356 466.335 416.77 465.971 417.035 cv
465.96 417.046 li
465.584 417.322 465.165 417.686 464.713 418.094 cv
464.646 418.139 li
462.516 420.081 459.813 423.039 459.294 423.513 cv
459.283 423.502 li
459.239 423.381 459.073 422.41 458.952 422.156 cv
458.974 422.134 li
459.062 422.034 li
459.813 421.273 464.083 416.814 465.982 414.916 cv
466.357 414.552 466.71 414.199 467.03 413.868 cv
cp
.411765 .270588 .509804 rgb
f
501.452 412.201 mo
501.352 412.289 501.076 413.426 501.076 413.426 cv
498.858 413.901 496.849 414.044 495.205 414.044 cv
493.759 414.044 492.579 413.934 491.795 413.823 cv
491.685 412.962 li
491.674 412.962 li
493.164 413.183 496.749 413.352 501.13 412.369 cv
501.23 412.358 501.352 412.234 501.452 412.201 cv
cp
f
257.843 113.875 mo
257.843 114.333 li
223.34 114.333 li
223.34 113.875 li
223.34 113.689 223.34 113.494 223.35 113.309 cv
223.652 104.046 231.256 96.628 240.596 96.628 cv
245.36 96.628 249.674 98.5605 252.787 101.674 cv
255.793 104.68 257.697 108.799 257.833 113.357 cv
257.843 113.533 257.843 113.699 257.843 113.875 cv
cp
.988235 .627451 .329412 rgb
f
265.622 121.527 mo
215.356 121.527 li
222.92 114.275 li
223.34 113.875 li
257.843 113.875 li
258.312 114.333 li
265.622 121.527 li
cp
f
258.312 114.333 mo
257.843 114.333 li
245.184 114.255 229.831 114.206 223.34 114.275 cv
222.92 114.275 li
222.92 114.275 223.34 113.494 223.35 113.309 cv
227.547 113.25 236.888 113.23 257.833 113.357 cv
257.843 113.533 258.312 114.333 258.312 114.333 cv
cp
.411765 .270588 .509804 rgb
f
260.284 251.381 mo
260.284 280.534 li
260.284 284.21 257.298 287.196 253.609 287.196 cv
225.308 287.196 li
221.619 287.196 218.646 284.21 218.646 280.534 cv
218.646 251.381 li
260.284 251.381 li
cp
.0666667 .0666667 .0666667 rgb
f
219.325 252.697 mo
219.111 252.697 218.908 252.572 218.818 252.365 cv
218.697 252.084 218.826 251.76 219.106 251.639 cv
240.977 242.21 236.817 213.023 233.146 187.272 cv
232.007 179.28 230.931 171.732 230.681 165.158 cv
230.128 150.595 231.509 142.408 235.16 138.611 cv
236.682 137.027 238.626 136.222 240.935 136.219 cv
240.945 136.219 li
243.052 136.219 244.847 137.056 246.279 138.707 cv
251.465 144.686 252.034 162.013 247.971 190.208 cv
242.931 225.18 247.242 247.376 259.798 251.104 cv
260.091 251.191 260.258 251.498 260.171 251.79 cv
260.085 252.081 259.778 252.246 259.485 252.162 cv
246.153 248.204 241.677 226.145 246.878 190.05 cv
250.895 162.187 250.412 145.156 245.446 139.43 cv
244.215 138.012 242.743 137.322 240.946 137.322 cv
240.936 137.322 li
238.91 137.325 237.281 137.997 235.955 139.376 cv
232.529 142.939 231.243 150.878 231.784 165.116 cv
232.031 171.633 233.103 179.154 234.238 187.117 cv
237.965 213.259 242.189 242.89 219.543 252.652 cv
219.325 252.697 li
cp
.227451 .227451 .227451 rgb
f
225.533 254.698 mo
218.64 254.698 li
218.64 251.413 li
228.818 251.413 li
228.818 253.227 227.348 254.698 225.533 254.698 cv
cp
.988235 .627451 .329412 rgb
f
260.278 254.698 mo
253.385 254.698 li
251.571 254.698 250.1 253.227 250.1 251.413 cv
260.278 251.413 li
260.278 254.698 li
cp
f
226.727 287.196 mo
225.308 287.196 li
221.619 287.196 218.646 284.21 218.646 280.534 cv
218.646 277.536 li
221.656 277.93 226.135 279.3 226.628 284.617 cv
226.714 285.567 226.751 286.418 226.727 287.196 cv
cp
f
252.203 287.196 mo
253.622 287.196 li
257.311 287.196 260.284 284.21 260.284 280.534 cv
260.284 277.536 li
257.274 277.93 252.795 279.3 252.302 284.617 cv
252.215 285.567 252.178 286.418 252.203 287.196 cv
cp
f
245.257 267.061 mo
231.611 267.061 li
231.291 267.061 231.032 266.802 231.032 266.481 cv
231.032 266.161 231.291 265.902 231.611 265.902 cv
245.257 265.902 li
245.577 265.902 245.836 266.161 245.836 266.481 cv
245.836 266.802 245.577 267.061 245.257 267.061 cv
cp
f
238.538 269.601 mo
238.538 269.601 li
237.353 269.601 236.393 268.641 236.393 267.456 cv
236.393 266.168 li
240.684 266.168 li
240.684 267.456 li
240.684 268.641 239.723 269.601 238.538 269.601 cv
cp
f
440.32 234.392 mo
440.189 234.327 440.1 234.245 440.057 234.145 cv
440.141 234.138 440.228 234.129 440.317 234.118 cv
440.318 234.209 440.319 234.301 440.32 234.392 cv
.8 .8 .8 rgb
f
441.552 234.585 mo
441.003 234.585 440.58 234.522 440.32 234.392 cv
440.319 234.301 440.318 234.209 440.317 234.118 cv
444.189 233.665 452.337 230.541 455.953 225.876 cv
458.031 223.199 459.072 220.052 459.754 217.004 cv
460.553 217.045 461.401 217.076 462.291 217.093 cv
460.731 222.264 459.188 226.228 458.251 227.333 cv
454.48 231.779 445.215 234.585 441.552 234.585 cv
462.615 216.001 mo
461.691 215.987 460.812 215.958 459.984 215.918 cv
459.987 215.906 459.989 215.894 459.991 215.882 cv
462.708 215.68 li
462.677 215.787 462.646 215.894 462.615 216.001 cv
.8 .686274 .686274 rgb
f
459.991 215.882 mo
460.75 212.097 461.075 208.579 462.309 206.453 cv
465.204 201.476 466.928 193.821 467.351 186.169 cv
468.149 193.14 465.486 206.096 462.708 215.68 cv
459.991 215.882 li
f
462.291 217.093 mo
461.401 217.076 460.553 217.045 459.754 217.004 cv
459.836 216.64 459.912 216.278 459.984 215.918 cv
460.812 215.958 461.691 215.987 462.615 216.001 cv
462.507 216.37 462.399 216.735 462.291 217.093 cv
.654902 .47451 .47451 rgb
f
403.502 237.522 mo
403.315 237.522 403.128 237.459 402.973 237.331 cv
402.621 237.039 402.573 236.517 402.865 236.165 cv
402.933 236.084 409.607 227.968 408.904 222.431 cv
408.726 221.024 408.088 219.941 406.952 219.122 cv
404.489 217.342 402.303 216.777 400.46 217.434 cv
397.031 218.659 395.657 223.715 395.644 223.767 cv
395.528 224.206 395.08 224.476 394.632 224.355 cv
394.191 224.239 393.927 223.787 394.042 223.345 cv
394.106 223.104 395.646 217.403 399.897 215.878 cv
402.285 215.02 404.986 215.659 407.922 217.779 cv
409.427 218.867 410.311 220.362 410.547 222.225 cv
411.339 228.474 404.433 236.869 404.139 237.223 cv
403.975 237.421 403.739 237.522 403.502 237.522 cv
cp
.176471 .176471 .176471 rgb
f
420.535 207.759 mo
420.535 207.759 407.023 200.792 399.436 211.415 cv
399.436 211.415 392.685 220.473 397.789 219.231 cv
402.893 217.99 415.208 220.841 415.208 220.841 cv
420.535 207.759 li
cp
1 .741176 .611765 rgb
f
462.309 206.453 mo
459.97 210.481 460.897 219.508 455.953 225.876 cv
452.035 230.931 442.798 234.175 439.443 234.175 cv
434.664 234.175 426.045 228.812 420.328 224.85 cv
420.008 224.629 419.688 224.419 419.39 224.199 cv
416.554 222.201 414.634 220.7 414.634 220.7 cv
414.634 220.7 416.399 215.877 416.433 214.178 cv
416.554 207.446 414.347 205.923 413.552 205.592 cv
419.589 207.06 li
420.77 207.347 li
434.355 210.679 li
437.335 211.408 li
437.335 211.408 437.357 211.231 437.401 210.9 cv
437.853 207.402 440.679 186.566 446.108 169.89 cv
449.165 160.51 456.869 155.003 463.126 163.412 cv
469.372 171.833 468.644 195.56 462.309 206.453 cv
1 .85098 .85098 rgb
f
441.449 213.409 mo
441.36 213.619 441.162 213.729 440.952 213.729 cv
440.72 213.674 li
434.352 210.683 li
434.352 210.683 437.354 211.235 437.398 210.904 cv
441.184 212.681 li
441.46 212.813 441.581 213.133 441.449 213.409 cv
cp
.807843 .568627 .568627 rgb
f
388.14 242.364 mo
392.984 243.221 406.594 244.995 418.723 240.684 cv
410.711 236.732 396.635 235.686 388.14 242.364 cv
cp
400.562 245.126 mo
395.167 245.126 390.107 244.524 386.134 243.662 cv
385.834 243.596 385.595 243.371 385.512 243.076 cv
385.43 242.78 385.518 242.462 385.741 242.252 cv
395.509 232.992 412.862 235.107 421.123 240.109 cv
421.39 240.271 421.543 240.571 421.519 240.882 cv
421.495 241.195 421.296 241.465 421.006 241.584 cv
414.662 244.173 407.346 245.126 400.562 245.126 cv
cp
.176471 .176471 .176471 rgb
f
449.452 268.188 mo
448.768 269.469 li
444.674 277.194 435.591 280.615 427.513 277.724 cv
427.502 277.724 li
427.005 277.547 426.52 277.348 426.045 277.128 cv
425.979 278.43 li
425.979 278.452 li
424.246 310.379 li
432.762 341.353 li
432.762 341.353 427.511 354.576 409.5 354.263 cv
385.482 353.847 383.451 343.14 383.451 343.14 cv
390.034 310.379 li
385.013 280.516 li
384.373 276.719 li
384.163 276.984 383.953 277.227 383.722 277.47 cv
381.018 280.46 377.255 282.005 373.469 282.005 cv
370.136 282.005 366.792 280.814 364.122 278.375 cv
360.656 275.207 li
360.656 275.207 374.043 255.32 379.981 247.816 cv
381.713 245.62 383.545 243.766 385.443 242.221 cv
385.62 242.077 li
385.995 241.768 386.37 241.47 386.757 241.194 cv
386.867 241.216 386.988 241.249 387.11 241.271 cv
394.438 242.827 408.652 244.737 420.571 239.87 cv
420.814 240.013 421.046 240.157 421.277 240.311 cv
421.421 240.4 421.564 240.499 421.697 240.598 cv
422.16 240.907 422.602 241.227 423.021 241.558 cv
423.054 241.58 li
432.413 248.986 449.452 268.188 449.452 268.188 cv
cp
.988235 .627451 .329412 rgb
f
396.939 216.421 mo
396.939 216.421 403.249 224.92 404.868 224.326 cv
406.487 223.731 400.882 215.767 400.882 215.767 cv
400.882 215.767 397.714 214.956 396.939 216.421 cv
cp
1 .741176 .611765 rgb
f
395.896 218.676 mo
395.896 218.676 400.559 225.742 402.177 225.147 cv
403.796 224.553 397.899 217.165 397.899 217.165 cv
397.899 217.165 396.671 217.21 395.896 218.676 cv
cp
f
399.705 215.544 mo
399.705 215.544 405.974 224.074 407.595 223.487 cv
409.217 222.9 403.65 214.909 403.65 214.909 cv
403.65 214.909 400.487 214.083 399.705 215.544 cv
cp
f
401.887 214.001 mo
401.887 214.001 408.156 222.53 409.777 221.944 cv
411.399 221.357 405.832 213.366 405.832 213.366 cv
405.832 213.366 402.669 212.539 401.887 214.001 cv
cp
f
401.348 217.828 mo
401.242 217.828 401.141 217.766 401.095 217.661 cv
400.693 216.73 400.668 215.966 401.022 215.391 cv
401.538 214.55 402.659 214.471 402.706 214.468 cv
402.894 214.453 402.989 214.574 402.999 214.726 cv
403.008 214.878 402.893 215.008 402.742 215.019 cv
402.732 215.019 401.855 215.085 401.491 215.682 cv
401.238 216.095 401.276 216.688 401.602 217.444 cv
401.662 217.583 401.597 217.745 401.457 217.806 cv
401.348 217.828 li
cp
.768627 .513726 .384314 rgb
f
405.06 217.828 mo
404.953 217.828 404.852 217.766 404.807 217.661 cv
404.405 216.73 404.38 215.966 404.734 215.391 cv
405.25 214.55 406.371 214.471 406.418 214.468 cv
406.595 214.453 406.701 214.574 406.71 214.726 cv
406.72 214.878 406.605 215.008 406.454 215.019 cv
406.444 215.019 405.567 215.085 405.202 215.682 cv
404.95 216.095 404.988 216.688 405.313 217.444 cv
405.374 217.583 405.309 217.745 405.169 217.806 cv
405.06 217.828 li
cp
f
398.181 218.212 mo
398.074 218.212 397.973 218.15 397.928 218.045 cv
397.526 217.114 397.501 216.349 397.854 215.774 cv
398.371 214.934 399.49 214.854 399.538 214.852 cv
399.718 214.842 399.82 214.958 399.83 215.109 cv
399.84 215.261 399.724 215.392 399.573 215.402 cv
399.564 215.403 398.686 215.469 398.323 216.065 cv
398.071 216.479 398.108 217.071 398.434 217.827 cv
398.495 217.966 398.43 218.129 398.29 218.189 cv
398.181 218.212 li
cp
f
370.828 125.3 mo
365.934 120.407 li
364.04 118.512 364.04 115.44 365.934 113.546 cv
370.828 108.652 li
375.721 113.546 li
377.616 115.44 377.616 118.512 375.721 120.407 cv
370.828 125.3 li
cp
.988235 .627451 .329412 rgb
f
372.997 108.504 mo
372.997 109.742 371.994 110.745 370.756 110.745 cv
369.518 110.745 368.514 109.742 368.514 108.504 cv
368.514 107.266 369.518 106.262 370.756 106.262 cv
371.994 106.262 372.997 107.266 372.997 108.504 cv
cp
.219608 .219608 .219608 rgb
f
370.756 106.657 mo
370.604 106.657 370.48 106.533 370.48 106.381 cv
370.48 104.374 li
370.48 104.222 370.604 104.099 370.756 104.099 cv
371.471 104.099 372.055 103.516 372.055 102.8 cv
372.055 102.084 371.471 101.502 370.756 101.502 cv
370.04 101.502 369.457 102.084 369.457 102.8 cv
369.457 102.953 369.333 103.076 369.181 103.076 cv
369.029 103.076 368.905 102.953 368.905 102.8 cv
368.905 101.78 369.735 100.95 370.756 100.95 cv
371.776 100.95 372.606 101.78 372.606 102.8 cv
372.606 103.727 371.922 104.496 371.032 104.63 cv
371.032 106.381 li
371.032 106.533 370.908 106.657 370.756 106.657 cv
cp
f
388.972 125.3 mo
384.079 120.407 li
382.184 118.512 382.184 115.44 384.079 113.546 cv
388.972 108.652 li
393.866 113.546 li
395.76 115.44 395.76 118.512 393.866 120.407 cv
388.972 125.3 li
cp
.988235 .627451 .329412 rgb
f
391.214 108.504 mo
391.214 109.742 390.21 110.745 388.972 110.745 cv
387.734 110.745 386.73 109.742 386.73 108.504 cv
386.73 107.266 387.734 106.262 388.972 106.262 cv
390.21 106.262 391.214 107.266 391.214 108.504 cv
cp
.219608 .219608 .219608 rgb
f
388.972 106.657 mo
388.82 106.657 388.696 106.533 388.696 106.381 cv
388.696 104.374 li
388.696 104.222 388.82 104.099 388.972 104.099 cv
389.687 104.099 390.27 103.516 390.27 102.8 cv
390.27 102.084 389.687 101.502 388.972 101.502 cv
388.256 101.502 387.674 102.084 387.674 102.8 cv
387.674 102.953 387.55 103.076 387.398 103.076 cv
387.246 103.076 387.122 102.953 387.122 102.8 cv
387.122 101.78 387.952 100.95 388.972 100.95 cv
389.992 100.95 390.822 101.78 390.822 102.8 cv
390.822 103.727 390.138 104.496 389.248 104.63 cv
389.248 106.381 li
389.248 106.533 389.124 106.657 388.972 106.657 cv
cp
f
gsave
465.02 166.916 mo
464.481 165.572 463.85 164.389 463.126 163.412 cv
462.069 161.992 460.972 160.969 459.862 160.294 cv
460.021 160.197 li
466.735 158.634 li
466.735 158.634 468.921 158.869 472.157 159.23 cv
466.026 162.897 li
465.02 166.916 li
clp
459.862 158.634 mo
472.157 158.634 li
472.157 166.916 li
459.862 166.916 li
cp
.8 .8 .8 rgb
f
grestore
490.532 178.718 mo
488.836 178.718 487.15 178.579 485.682 178.352 cv
486.707 172.002 li
482.129 160.372 li
490.069 161.309 498.273 162.355 499.107 162.772 cv
500.763 163.6 502.878 171.693 499.843 175.927 cv
498.365 177.989 494.422 178.718 490.532 178.718 cv
.8 .686274 .686274 rgb
f
485.682 178.352 mo
483.605 178.031 481.966 177.532 481.358 176.998 cv
479.805 175.634 477.496 175.298 475.652 175.298 cv
475.093 175.298 474.575 175.329 474.136 175.372 cv
473.01 175.481 470.235 176.441 467.244 177.374 cv
466.911 173.432 466.177 169.801 465.02 166.916 cv
466.026 162.897 li
472.157 159.23 li
474.944 159.541 478.508 159.945 482.129 160.372 cv
486.707 172.002 li
485.682 178.352 li
f
459.798 179.096 mo
455.88 179.096 452.056 176.533 450.915 175.555 cv
449.626 174.452 447.039 168.503 447.238 168.014 cv
459.862 160.294 li
460.972 160.969 462.069 161.992 463.126 163.412 cv
463.85 164.389 464.481 165.572 465.02 166.916 cv
466.177 169.801 466.911 173.432 467.244 177.374 cv
465.22 178.005 463.096 178.624 461.319 178.958 cv
460.814 179.053 460.306 179.096 459.798 179.096 cv
f
501.829 170.332 mo
501.752 170.553 501.664 170.762 501.565 170.972 cv
500.395 173.62 498.254 175.817 494.799 176.843 cv
494.612 176.898 494.413 176.953 494.215 176.998 cv
493.464 177.185 492.647 177.318 491.776 177.395 cv
477.274 178.62 484.392 168.202 474.581 173.345 cv
474.184 173.554 473.798 173.753 473.412 173.941 cv
472.617 174.338 li
466.36 177.373 460.996 178.587 455.5 175.927 cv
455.301 175.839 455.092 175.728 454.882 175.618 cv
452.785 174.492 450.666 172.793 448.459 170.409 cv
446.991 168.809 446.02 166.889 445.678 164.725 cv
445.634 164.538 445.612 164.35 445.59 164.163 cv
445.005 158.976 447.775 152.475 455.015 145.611 cv
466.68 134.542 461.813 98.3438 460.345 92.0863 cv
458.877 85.8289 459.142 63.1498 466.68 71.7911 cv
466.68 71.7911 492.476 71.0184 492.807 90.5963 cv
493.172 112.668 492.923 138.581 501.344 157.894 cv
502.823 161.282 503.385 166.249 501.829 170.332 cv
cp
.176471 .176471 .176471 rgb
f
501.189 367.082 mo
500.781 367.137 500.351 367.193 499.92 367.248 cv
489.414 353.64 486.798 315.113 486.776 314.705 cv
486.754 314.396 486.986 314.142 487.295 314.12 cv
487.626 314.076 487.858 314.341 487.88 314.65 cv
487.902 315.047 490.562 354.38 501.189 367.082 cv
cp
.768627 .580392 .580392 rgb
f
480.784 369.345 mo
480.419 369.378 480.055 369.4 479.702 369.433 cv
474.692 352.923 473.235 331.723 473.224 331.414 cv
473.202 331.116 473.445 330.851 473.743 330.84 cv
474.085 330.807 474.305 331.061 474.328 331.359 cv
474.339 331.657 475.795 353.022 480.784 369.345 cv
cp
f
453.668 368.991 mo
453.315 368.936 452.962 368.881 452.609 368.815 cv
456.968 351.566 453.79 322.508 453.745 322.155 cv
453.712 321.857 453.922 321.581 454.231 321.536 cv
454.529 321.492 454.805 321.713 454.849 322.022 cv
454.893 322.375 458.049 351.389 453.668 368.991 cv
cp
f
460.766 201.95 mo
460.633 201.934 li
460.331 201.859 453.23 200.084 451.49 199.533 cv
450.984 199.373 450.923 198.975 450.917 198.857 cv
450.896 198.471 450.84 197.445 460.544 193.168 cv
460.82 193.046 461.148 193.171 461.272 193.451 cv
461.395 193.73 461.267 194.055 460.988 194.178 cv
457.458 195.734 453.499 197.716 452.318 198.629 cv
454.624 199.295 460.832 200.846 460.9 200.863 cv
461.195 200.936 461.375 201.236 461.302 201.532 cv
461.239 201.783 461.014 201.95 460.766 201.95 cv
cp
.807843 .568627 .568627 rgb
f
458.314 173.996 mo
457.42 174.768 456.482 175.408 455.5 175.927 cv
455.301 175.839 455.092 175.728 454.882 175.618 cv
455.964 175.099 456.99 174.415 457.95 173.576 cv
474.107 159.527 469.957 105.33 469.913 104.778 cv
469.902 104.634 470.012 104.502 470.167 104.491 cv
470.288 104.48 470.443 104.59 470.454 104.734 cv
470.498 105.285 474.67 159.759 458.314 173.996 cv
cp
.109804 .109804 .109804 rgb
f
452.278 161.205 mo
450.269 162.916 448.062 164.085 445.678 164.725 cv
445.634 164.538 445.612 164.35 445.59 164.163 cv
447.885 163.545 449.993 162.419 451.913 160.786 cv
465.631 149.098 465.455 115.152 465.444 114.81 cv
465.444 114.655 465.565 114.534 465.719 114.534 cv
465.874 114.534 465.995 114.655 465.995 114.81 cv
466.007 115.152 466.183 149.352 452.278 161.205 cv
cp
f
473.412 173.941 mo
472.617 174.338 li
482.549 152.244 474.339 99.1273 474.239 98.5314 cv
474.217 98.3768 474.328 98.2334 474.471 98.2113 cv
474.637 98.1892 474.769 98.2996 474.791 98.443 cv
475.177 100.86 483.002 151.548 473.412 173.941 cv
cp
f
494.799 176.843 mo
494.612 176.898 494.413 176.953 494.215 176.998 cv
482.98 164.008 483.609 112.028 483.653 109.545 cv
483.653 109.391 483.785 109.269 483.929 109.269 cv
483.94 109.269 li
484.083 109.269 484.205 109.402 484.205 109.545 cv
484.194 110.163 483.521 164.383 494.799 176.843 cv
cp
f
501.829 170.332 mo
501.752 170.553 501.664 170.762 501.565 170.972 cv
490.683 153.811 488.884 114.677 488.807 112.823 cv
488.796 112.68 488.917 112.547 489.072 112.536 cv
489.083 112.536 li
489.226 112.536 489.348 112.658 489.359 112.801 cv
489.381 113.254 491.202 152.939 501.829 170.332 cv
cp
f
439.631 56.1824 mo
439.631 56.1824 455.634 45.2913 473.341 52.6877 cv
513.192 69.333 506.737 78.9006 507.139 89.9124 cv
507.736 106.237 498.899 111.474 495.117 114.241 cv
491.134 117.155 465.683 123.045 460.348 115.943 cv
455.013 108.842 441.72 93.1008 435.872 90.4063 cv
430.024 87.7121 417.205 71.2421 439.631 56.1824 cv
.945098 .85098 1 rgb
f
460.071 83.6099 mo
460.071 83.6099 486.851 100.336 490.795 80.9298 cv
490.795 80.9298 492.42 91.3556 485.004 95.7229 cv
477.471 100.159 462.49 93.9978 460.071 83.6099 cv
cp
.811765 .701961 .886275 rgb
f
488.641 75.1621 mo
488.641 75.1621 461.835 58.8972 458.373 78.3954 cv
458.373 78.3954 456.11 68.2193 463.416 63.6697 cv
470.836 59.049 485.966 64.8373 488.641 75.1621 cv
cp
f
481.167 93.6627 mo
476.615 94.8283 471.191 93.9203 466.522 90.7715 cv
458.697 85.4933 455.913 75.886 460.317 69.3558 cv
462.462 66.176 465.965 64.1961 470.173 63.7777 cv
474.345 63.3647 478.722 64.5395 482.498 67.086 cv
486.273 69.6321 489.003 73.2497 490.183 77.2734 cv
491.374 81.3339 490.849 85.3216 488.704 88.5014 cv
486.927 91.1364 484.247 92.874 481.167 93.6627 cv
cp
.945098 .85098 1 rgb
f
508.8 91.3139 mo
508.598 89.1976 506.757 84.7772 506.721 87.7341 cv
506.675 91.5667 505.687 105.684 501.683 108.869 cv
500.317 109.955 509.129 100.964 509.129 100.964 cv
509.129 100.964 509.223 95.7282 508.8 91.3139 cv
cp
1 .741176 .611765 rgb
f
497.091 112.815 mo
497.091 112.815 500.533 107.415 500.881 106.896 cv
501.654 105.747 503.046 103.506 503.149 105.661 cv
503.251 107.815 503.149 108.464 503.149 108.464 cv
497.091 112.815 li
cp
f
420.328 224.85 mo
420.008 224.629 419.688 224.419 419.39 224.199 cv
421.09 220.502 421.167 214.641 419.589 207.06 cv
420.77 207.347 li
422.337 215.105 422.182 221.031 420.328 224.85 cv
cp
.807843 .568627 .568627 rgb
f
390.034 310.379 mo
424.253 310.243 li
424.458 306.47 li
389.431 306.793 li
390.034 310.379 li
cp
.411765 .270588 .509804 rgb
f
387.11 241.271 mo
387.044 249.868 386.69 268.464 385.013 280.516 cv
385.013 280.516 383.953 277.227 383.722 277.47 cv
385.024 266.125 385.366 250.442 385.443 242.221 cv
385.62 242.077 li
385.995 241.768 386.37 241.47 386.757 241.194 cv
386.867 241.216 386.988 241.249 387.11 241.271 cv
cp
.807843 .486275 .243137 rgb
f
427.502 277.724 mo
427.005 277.547 425.979 278.43 425.979 278.43 cv
423.496 266.467 421.884 248.048 421.277 240.311 cv
421.421 240.4 421.564 240.499 421.697 240.598 cv
422.16 240.907 422.602 241.227 423.021 241.558 cv
423.054 241.58 li
423.727 249.846 425.272 266.61 427.502 277.724 cv
cp
f
402.68 170.716 mo
402.128 170.739 li
402.456 178.461 399.355 196.572 390.401 205.459 cv
387.289 208.547 383.778 210.145 379.961 210.241 cv
375.97 210.146 372.335 208.509 369.204 205.301 cv
361.124 197.021 357.924 179.892 358.306 170.923 cv
357.754 170.899 li
357.369 179.965 360.615 197.29 368.809 205.687 cv
371.751 208.702 375.113 210.394 378.822 210.743 cv
378.819 210.794 li
379.079 210.807 379.337 210.814 379.593 210.814 cv
379.697 210.814 379.799 210.8 379.903 210.798 cv
380.029 210.801 380.151 210.817 380.278 210.817 cv
380.374 210.817 380.47 210.816 380.568 210.814 cv
380.566 210.764 li
384.299 210.52 387.734 208.884 390.79 205.85 cv
399.865 196.842 403.011 178.522 402.68 170.716 cv
cp
.988235 .627451 .329412 rgb
f
378.814 203.691 mo
378.813 203.71 li
379.228 203.741 379.638 203.757 380.045 203.757 cv
384.082 203.757 387.746 202.191 390.951 199.092 cv
398.834 191.467 402.007 176.362 401.669 168.554 cv
401.117 168.578 li
401.451 176.286 398.329 191.188 390.567 198.695 cv
387.578 201.587 384.181 203.095 380.447 203.198 cv
380.446 203.176 li
380.288 203.183 380.133 203.185 379.977 203.186 cv
379.859 203.186 379.739 203.181 379.62 203.178 cv
364.651 202.927 359.637 177.942 359.063 169.031 cv
358.514 169.067 li
359.127 178.598 363.979 202.641 378.814 203.691 cv
cp
f
379.759 194.708 mo
379.849 194.708 379.94 194.702 380.03 194.7 cv
380.125 194.702 380.22 194.708 380.315 194.708 cv
384.408 194.708 388.365 192.934 391.804 189.544 cv
397.259 184.167 400.99 174.953 400.673 167.633 cv
400.121 167.657 li
400.432 174.835 396.771 183.874 391.417 189.15 cv
387.861 192.655 383.734 194.377 379.523 194.133 cv
379.523 194.134 li
375.764 194.066 372.151 192.444 369.025 189.363 cv
363.051 183.475 360.204 173.987 360.478 167.657 cv
359.927 167.633 li
359.646 174.085 362.549 183.756 368.637 189.756 cv
371.936 193.007 375.765 194.708 379.759 194.708 cv
cp
f
402.726 170.519 mo
402.726 172.881 li
402.726 172.881 388.865 176.777 380.455 176.777 cv
371.13 176.777 357.622 172.881 357.622 172.881 cv
357.622 170.519 li
357.622 170.243 357.655 169.968 357.71 169.714 cv
357.754 169.526 357.809 169.35 357.875 169.184 cv
358.482 167.606 360.138 166.591 361.915 166.9 cv
367.311 167.816 376.317 169.25 380.168 169.261 cv
384.02 169.261 393.025 167.816 398.422 166.9 cv
400.408 166.557 402.24 167.86 402.637 169.736 cv
402.682 169.912 402.704 170.089 402.715 170.277 cv
402.726 170.519 li
cp
.411765 .270588 .509804 rgb
f
402.715 170.277 mo
397.715 171.557 388.335 173.665 380.565 173.676 cv
380.488 173.676 li
370.247 173.676 361.661 171.115 357.71 169.714 cv
357.754 169.526 357.809 169.35 357.875 169.184 cv
361.771 170.575 370.302 173.124 380.477 173.124 cv
380.565 173.124 li
388.302 173.113 397.682 171.005 402.637 169.736 cv
402.682 169.912 402.704 170.089 402.715 170.277 cv
cp
.290196 .2 .356863 rgb
f
444.856 100.47 mo
444.824 100.437 li
445.459 98.496 li
445.46 98.4963 445.46 98.4967 445.461 98.497 cv
445.283 99.1318 445.081 99.8007 444.856 100.47 cv
.894118 .780392 .721569 rgb
f
460.138 115.665 mo
446.383 101.987 li
446.383 99.4598 li
447.377 100.508 448.38 101.598 449.373 102.702 cv
451.374 104.987 453.817 107.851 455.996 110.429 cv
457.606 112.394 459.028 114.197 460.138 115.665 cv
.894118 .639216 .509804 rgb
f
446.383 101.987 mo
444.856 100.47 li
445.081 99.8007 445.283 99.1318 445.461 98.497 cv
445.461 98.4973 445.461 98.4976 445.462 98.498 cv
445.768 98.8145 446.074 99.1347 446.383 99.4598 cv
446.383 101.987 li
f
461.68 117.198 mo
460.138 115.665 li
459.028 114.197 457.606 112.394 455.996 110.429 cv
459.105 114.105 461.68 117.198 461.68 117.198 cv
449.373 102.702 mo
448.38 101.598 447.377 100.508 446.383 99.4598 cv
446.074 99.1347 445.768 98.8145 445.462 98.498 cv
445.954 98.8677 447.462 100.52 449.373 102.702 cv
.866667 .698039 .721569 rgb
f
410.576 394.884 mo
209.72 394.884 li
209.72 395.875 li
410.576 395.875 li
410.576 394.884 li
cp
.258824 .176471 .317647 rgb
f
321.5 414.088 mo
321.5 419.752 316.358 424.343 310.015 424.343 cv
303.672 424.343 298.53 419.752 298.53 414.088 cv
298.53 408.425 303.672 403.833 310.015 403.833 cv
316.358 403.833 321.5 408.425 321.5 414.088 cv
cp
.243137 .145098 .329412 rgb
f
405.374 249.745 mo
405.469 251.079 404.843 252.21 403.976 252.272 cv
403.109 252.333 402.33 251.302 402.236 249.968 cv
402.141 248.634 402.767 247.503 403.633 247.441 cv
404.5 247.38 405.279 248.411 405.374 249.745 cv
cp
.807843 .486275 .243137 rgb
f
405.88 258.491 mo
405.975 259.825 405.349 260.956 404.482 261.018 cv
403.616 261.079 402.836 260.048 402.742 258.714 cv
402.647 257.38 403.273 256.249 404.14 256.187 cv
405.007 256.126 405.786 257.157 405.88 258.491 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (Myst) ()
%%Title: (1807.w042.n002.11A.p15.11-01.eps)
%%CreationDate: 7/20/2018 1:21 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj4M-oCqj&Y%ta=>Yl+?B3tY(O:XfG&9(u1,R9-91Q.:fMuRF>l;ueSbBd!Q/<bEu0N<A!mcrN;\p@dnX59h@b-d/0qEJbp
%'hq9%(oEHOD'c%VrR\p'e+/XQ)Gqh_06X@%XaSj'(VNj">HcPGXgM.%B;(XF03lj_L"&2f;Q9[eD,gq^/#nfd2,Ei*MO1M*X+b`>
%8h1>":V$%s(=f,`n<r8/l#)bOa'QAP_k=HKhkQaEBU8k`rt[hHZo.NOD-A#u6_f,?qUbXYgT(&#`/fMrT,sYnbcW8'4n]eJAt`M5
%f;PIPPY1s-d[-r'G@'K4g1!1DYS;M%5=hK)V:7d5O;?HRBFlZnVo\nV?`Fb>r;Tesr')a`q[&n&Pb'Wu5DP"SoV%*CQBF!sqHB't
%e=I-M=l_m>lo+0hC8#q'lEcHErktiq.YY=O$a&)og8&a-re^X5(T-j='Odjj/[]'PHJ6qJVMUJ9UShBjQ4+)<qd/uFXJMM7Kp(&P
%FHC4FO3@Quoep*KUIalOVrBR@e]M_IXD#ZibHtV0Gnld$Y^4#]@%rJ$!WSH3:(#5RY>'+DYB7!@CFMdD^O+A-mM11sTN>-:EmX;j
%-hZ(RckY)O;KbZ,l\(FukUB0Tr,oB;PcFSnnS66*d/^3D%GP!r6_`IjB)/0+>?fKheLaL\UqP5.QU8il)0EeM7ORRkIU)nCNg0$N
%\%S4pFB(EImRQu,P28DmfA!]2[U-oS[.*7E7t[Io;lO-FDo4g74)1M=OLR"&oL5<#P\Xt-n%W1bn!qkE8r(.9C">A*h:d/Qn%TVo
%V>?UHg+1dfPk[#Qh`aR_IahBZUMfAVa0n1sQ:a@[r=IbW+,aO6/Toh1#,ogbaX`$<,$cTU*fT=Ypr[@g07U$@dDR^2rn8m2lV/Sb
%;X33,/,d;4CXIT1nUnOU,8R*hMpb</hl"C/L+U/:_hnZt2@49t"/WGYrfR\MBVjss$J"6&rI:$\-RM@t&N9,U=#;WQN6>8=Z'd'Q
%0dID(YN=*COV2MJf=lTsH3=,(As3Y]YYqD7RZU&;p&8l.AXZk.n"g/]!3lT[:GPOaM/H8<(l6dmRqU$Qru8=;jmP>O@Ut&2=,FL<
%ZnG"`HF6Z:pLd"(77Ed_r+l/j0`cVX,gfPRJRo4S9)52aBO$j]WNBd1FdY:if.2>YOBQ1[r0>\TS'@$6bst7r=&CS+r\0V!#&M:3
%3aNj[7[n?#g0V+/:_QLl#;Od$O=OEs7Z&&T#]*$mM?3ZW;$h"9=k]);g"%EUf#1+i_)WF/#V3;g.[0'7^_;Kh3W;kuq7Kcm9>l4<
%Ioan\Q#`oDWW?_%l1;8!Tlfr6Oi=Yo8'r$!A@bK(Up;HVRAUR&W2WV/F/t`XJVc<2bZ)C6$dEk*=RhE$[b>%3q0-*)H0JXbe_a%4
%SG7#,hub,MBYbdJiF='g7Hu#(5AX%:N4B^0?>G6BI[He]o5]iWO480Ih"HDaVT+C(pekH/9rtK0&Md82fQo61Yi4V]"Qh/tf2;Kl
%AS%ZLXX`>Rj4?AgJ@8l7XTkCrC\665rOj"X"nCb\\Hnt-d/5o`X7b!%5LiAc^0IB-C6m1,D3&dmALa']2@J>PMO3EsWThsCKU,ft
%XgQ&"nZ2U%)B=19W%,s,K@K0@2-RVJ(]%I:FC_?mj\ktr5d=Ld.SA(gA@^fY7cr,L?X1#Q@,i%C(HQ]I6m<\BdC>`'Ts<jQ!5Ve%
%EFG9g4XEt(p_$?g<C8cH7q5aU,sW)s`e@V0Er;=*LS'ci_B?^SU@:tJ@FR7aNCC9;c*Io59LWml9Scjs-R3;P/-osbnYgT1#K:lF
%]9e216jo%`-S3\Z[$k=%;b=k&rISP6F_Sf7NQt\#jlMug[gj!_&iS0<IU'tElGr9IHg4'Df]$r@<[XTY=QtL_Ae5130FUF/@II_@
%dteE[pc;+<Ft2)JZ'(IS7]CCTg2XgT/:'Cp-^4b/6jSb_T7I*'+Am'%blZSU#uCqdNd8BMld\J<`AV"Rm;bRh@!-_d!*40tH"qbF
%fhEGAF3AGN/3@?Zg!)+\8RR\DblZQMPo'+6CK>8`"FFp%gPssr9AnNmRs&l%DJn1Q9tN#'k,-ti[/7%o%g[,SP%&U!8;osZNn5]E
%MGu;-kQ^ER*h=f:U-k4)%=XD'+*/[%*mHou:,\)XI+,.I^F.CdC&':$W2)14!blt?8g2;Z;k[/?,K)8:7Ua^7$+H(A?EOa'!\mE`
%i>((W:(eul.6B037PUS"P5.8U?kc)6>J0mD0N=;?\<R]/=)"0T<NF`7m&OU#;siKq7?SCC'HZ$"UssN]8Z='8<`8Rr:7pe.FkgdM
%NA#cT,!GmVj2/.QW0EJs@'NNWihf9KPes/)o*-Jm>%c\\,3q[`)]'uXb)aEc"R%\U<kH^Pkc,4@a(iI*C?91SDD6Xm^7E1U;p'CC
%bBtrqOXhb^I([IKVUDt*b^er-<Z*;JVpWDM%%TV"Q/%W(@].Re[E=3WemPR+Rg33Q;)[sI^Ou_Jl.c1a4apm,W9Cki%Q]7;e8Ooa
%l#C6/)Abs&-b;pUnZTsBmh<25Y6Nr'_a,<<[?^dt4UDVpA?WnDPNWhn`me[`'/($&a*T1?2AVbCp1;ci-dc%n<^nFo"oh^K3K47U
%f3I(rCr11pl+Yc^n1^9j4M_c-R%GPJc]I=&aFF$p3Pg]Zq&+3<.e>IWq&/c$%/H>/cHhRWYL!EB+g[i[.C,hP-PW"JF)Hq8j$Efs
%nbh0eIVq842\onqT,URYPAG\cr!+d8q76#<Pq@R(<^&b:[(L4g7LZblKZ8=QN(r>(^u7?!F#'MN8_POh$KB%FL"B*qf0(%_$EcWm
%JX%E71FGGk]>E2OM52+El+4i+:H7g4FGV9PpC%A)`#-`^A:ZCDmNJ'HaSr[]T0QZ+J=FcQ]?)DP9dZ+*oo#^1e^d<&HgA'#aqsaD
%n)\l7CTf\1dX&T0W!tkfSGUXprj008/=?f-c2KLLJHO`/csI*mB9BK0'2;4'S-o9H=$)6oM?P<Hm&%mifb(KU/9TV99b)gcNBO9)
%9I8AmZg(O6_*5ahPo4R*i6`QC&=YV%qd<)Fk6^jH`;CO6f\S+<Z[%]Y\G]3U/;n9e(fm%d?KR97\`;e?W6H>9F2uK!*A>jc+ri8a
%$cDt1\`78hGaUX"k)Pe=j5j>^0B:M0Agbl:@N7qZdbpO.&(7ObbIs3;@cBO%1RGB+`a)'oj@n$nYTcZ%JOrX>OX/VtUaN67Z4?JZ
%'pB>f2Yg6jeoJ7GCpo3n\U@R.&+m?WL#W:DQ:VmQo5%0CiA`/?CZ5M.EkXW%NT4??Go!=2b2RN&Fe*/aRV-RXRgNiSdK?\0OI8?&
%l6A8#fsQDo<2Ltj93EJ#'_5(g(4Bm6,!ct7:DoVr(\t"'RB4OPU`9?n3RCm*@7?`<f3jdc1#)05-?qXqMN_AjNjiksp0n.D*2fes
%ok?&lE.Ln"5$7YoHmFs[LElr#1e*<Y,F9&.kN=G#NSVtR8dXMrVM94"jCX0m*=ThuZJ!fSV-Yg3+RQSC8tgL;Se@]BUJNMNJ$(6b
%7/G0SA@Jj4\T-#&_H?H0fgcA=R?h]S#N8D=0)?<#4U&k48a1$=L$?h#T?X`dd(1cml9DS\`S4ugDIB'bDrPZ,s0taEZZ'[JT?gI4
%9sDj4VtBjr12514JMi(HV=XmW@+m5+NT#;ORo5k*k-ibjUt_='44C1tb_TjbU\T'GCoXI0[r[OV6N>#H4*.633g?AL:@uR31;?+=
%8BB(pOO$)b@o@p@cL,%FRe[E`ag`TT^Hk%$QfR9fa<t%AcMT9)\T"&iiAeS<4rM4WIY3#'K]Dt7q-5gQmMc%:A`GUnOFJj<2#/I<
%kJCQo-MaI>bfqi\kuj&d*Q:uU`-J[cC_nQSlK':GZ)BUE/qW5`_#ZaY_EZ.^AZ\loTN1o].'%^%n@4Q@kqp^I'sEqa+cNB\3);%2
%:)V@b/MH#R^3'_W,W?:Hb)Zq>>5bs:DANPKNlGs5U"i5MP)'rbV8k,Z7M=fnF7O'sRS/`U@k)`5RSr3rrB:CHdF_4=@i*a*M%_PL
%G,TS"8BBUd>BZ9XF+;hKRqsu;gIXS@7I.S])faon6W9U%@q?F=A?7%Q=!p1)`m&ds`e)LP^N:Q@S@a9.P>(nsnk?l&aYhSUM;LTT
%(LW#n"Ag'HK\9i>;]\>g:3$MP)V+*<;;K03Kd\tgDA,e"/t.*?HBoffB^P2tf?BSNA+Y7Eg'Y:sB1Z-J._LsK.`%ee,Q'U%q_;,t
%bhOK$W>1JkP)[ZuOeqH0P+$MKgR48Y\B.F8I:foFf&.)tEH!6!UfjY(cBGoV0S)'1m0a.4n+F2^Si6+Rk=dp#"P&K5PFfBMqQ16_
%]O`RX\V9XUoK!Mf]U9>S)]HOd4eD9fHD!d9jhj38I")B^o-@.XB0H(H$qC43s6u4po75^_[PBf&F<AhO^Ef^@o0D3,J\DdjKsT(u
%RpNN%4TWGJ!Bs&`mum:-$/^U&c$D5R-<tA7R+M^uE'9$`Y)a*OVUqa\P!gu?8u6R?4HL%_g"(bLj7B@:]^p.q;,0lT!O'kq,rp^>
%Q5pcV8Yf=-g&0]60H-_</ma!3=IOjf<&E#Xd?9d7\QH7c/]lQn(-C&AV3&X!'Iu9uZmt1+=%JD`[TKIBpZkE+&<W^I6E3lX;>?Q0
%lq!I[(RbZ<?;WJOic-blO@$'S9gi/DkD5Q"Md!HQTJ;R04m?#A9qIqMcQU3]FZPshfVth.;/cBb_Qde?+*C3i%so6BSd!_7!D=4^
%IcJIF:(uD%R<8W(?atVEc4,!b:sAa,]AYo>^p'F'4dTO`k'M![k6CB8CaE9tHd,I,6(2KlHZ)`4^AlOq9/$Oo6E/a3i[jg3N_:7]
%[H+Windp#dPUlP+ok*6i?E%9W3+SJ!^-Bp=X?#H:0ElOC2s5R0c8YQh:GnAjdDYUN>Y=W`Ot8OEg/!IIV3gQ%TqL>Rck004UlhX5
%J2TJ=ND(LtD#70K`Vp[^ELJ.$l5Cj]4Ln(k,\renc=W$?29CqNOuDHpWDs_rl)1CED+O@ckHnO)R/1%XZ]K;Z#nE/jFD=;%Y7:*1
%ce`!#iZqIm=.7_R4pKhXs%N.'[4!sdR[_hT]4ZdCi"_XTF4LYRDZ61!PSbBNFOC+XcdDb*9ZmCTBKN69d$SngfM$t;T='5g9#iom
%QfkPQc\!Ek:QS>a8hb=3-#Q]&)(.Y;mXu5E#<="gbTGoYnTC4R#<?GY1!Wo`<hI.Jq;2pIdqAkka4!,>Bo+0R7HQ7ChV]gEnNc\&
%;:gi0\^@(<BbVHlY'&#W29)eVc9jH9;SLIE2<LSN2kn+6hZ]K\oB^(\ZC;oA@+&*<"s$doZRBm!D&R5uft+ehcd^d1s/mC@LGNh.
%.JCbT5`CmJH'8MjftMisi25epUG6prBC=0786+<1!KT\_*9J<%M7%W,D9pNk)KUtZUohkrUG;LV9T)D.R3dn`,%TgWNQLg+E(W^_
%gJGk%;\-P]Q6ih&g%M&`K/]CSg$/6RbgUC88#8b;^+."-7SZG"pnV)2;th[U(28M@g+$fJr[udj^5FjD*I@^f6B<*-kG=#Gls\lo
%4nG!Tk4[ZehOE8HZY8eRd!+XGhIN95g\0J453A@XqKQoJNSEGcYXihfDf5'h%DKBh2`LNo#%+j!Us>.>2d>P/s%<Qg.2(p`aMYcI
%+iBZ:pIo,D:ILWbDWIqDj-S;<JoLQ8HY[7pU6]`oV4I/;3LV+$2$oEDiJ\7*V28OMjeFgT)`M'IRFaD"j_'Bp-1MAeRFf3K9@(Hq
%Or<1\B*g,ql.Os(a>\6?)gmO8?CAW>Zp^-9l$GS03W%<s"eI#;Ju=<P.7mM8q+9MkPJE$O_J'TE;gt7)i:9Dhl'kdbILI_5;,.%8
%lqE5\ZNOer2.@m=1)#-UF-PT",C<Rle\'&0=7M0ir%5T^`e@bH_,8\Sna!;4AndGZ[i1MudAqT$p3r\iPp3,0T]QlWlqW82USRhf
%;EZ,PfZ2AFo>`+KS6p603TA!#W!#;ll&egLOI6lD3f=efpP1J[al[M5*rhbMKO9RLCuTYe!jBoAm.rqo'kA6#;pLl(pV-i[e+7UV
%Ot8l"1;3od^cKc1okG+%\Ce=\83iO/H4o&:5!BsT*c'K)0e&>Zj`^HH&m[@G3\IKH8=h5EIci@$M:)+;bE%Y\"t@sIj3f1j&Oi[=
%Ti%lBP)s%UfVs%KKMo`(-rP:pBN<24YE0lr@'NNWmamXJf8:7_RiRlHjNbDr7/E#s2_J&:Pok^P$.'j_Vd3s_e<<;BZ!%os>.L)8
%QRq%D#\G2&lcMn31S"P6VDq52-qTMg(AGd1&nR7(Z\^)GdeC>A^j/%bTd[n5$:UA\+e-bZPU'd!/YZn#@o3l;Q;\ESP)-%`58IfW
%KP,:j@Sr:21QOtma.iJNdUjPY11@W:L]E[mN($=V&LUmSbu-)b&nIk.URoN#oOueh&W;g.`[6/dcVc;d&nIkNfDirkRV@_[8[Of8
%fNmNBbNXI8.oCuOHmPXCj2U^B`/TddS0OE#XG36D:,bTCER#qEhp_a*djWV,p].3<pWj:4VDo?=]]NU&2!*CpYF0QGcKK_<d3X$P
%IF]9AJgm'C\iHOT1HJue$^k:#3Sgj'!f"`L';3ejp"CRsd\_b"<[<&#J[s0Hrr24PK>2KGGDDFnrBB-j`o'jnqO*](C3EdIWVo/c
%E'Z&JTNS!DNqtLW^<IECQ1BX]!4(f[]j=j<hjrb<T<D<<Usa9KKLC2I2h9V4nH"8.,K+dcN6mNJW[Rdts"n^Tn`P\rMXN=Fp2TtB
%`G<k=G[@HNW:=6I&rRhqg8b,!2QbJ!gX>>=JNr@R5$RZ5U!RG9Ict.nqF't0gC:g!Nm#sB`=&,4;@!!Y+1'n?[fo$WkZ?IrFA4"0
%e!AskNe7k2X(XPBE)[HY#(9<Jh:Bg&#K:d)/bM#SG#[/ggRn9,)1D?RYTG][WVt>%:J.YZ2got)NC7'=BS;-ERL]sVPj2Pu@q8%u
%:[MSaijIO4_!^\#kd[X)fGLs^fG5"J;I)f%l%<ajQ7[lLl.&`fUP:+-f:^g(<Um7WZ\D%-$Okql:TR.98q6k`=JVRk&<1)%f-?9g
%Ei]-HjNou`U7kqi=5ldKjmg[^=hTEara1mgF[69*+Ap>4M]Ee`jpGt"_hHQ>*rp&pT/"GXJ;@=ooCZJt6\PU[o5?MXLO'g`M\]'C
%9(Rbc`I##Dl1[NN[6@Kc;dk&.;X"NXdu+/coi$!6k)B;7O/&X):$Jq7:3,BR7hdPh4;#X]]!k,i.eVed2prc+On_BF,Z4L=6k!)I
%(/C'qFh)IW+C#Vu8@#g:?i94GKsgBkf`K;k#*B#6@].bZ=!rOsh'e,_[0k:O+@D"5,cB.AA)A8e^1m.VO(Yo0EpNYD"OQlWE:R&+
%>aufmDRrGTouJX_L1$P8M'sE4pdip00f.&$QmI)4M?a`=0l$WrXX$2MUkag4n8hK(dRI_'1,M_t59UjUX4aN)LZ*;TDj+A0kFK'm
%RcOZRk'8YoPpStQ@+H`rg&/51+6/Nj@N@Wogtp0)S(5@uSeIU=o5_eh=uoCqdGbhE!L,cT`t3&'RMT;"<%0eK>._=5B_GJq,mV;#
%VGXD_;qE4$2pm;t.ng:]N53lBSp@0gD"b)9#@/]D[&;36i7_kq0:H4JPp!IIO!@\S;K*U!]$DjsAu80e+W2qk(7tj@8+4WIUKt$g
%s-M*Y'e)9Xpat@EoDaupV<[aK:Nb*q&!#X=8>^<r6D`I4VEkGu-UnUcWFl(?5*NLpSqnQ3mDkPT->Hqjo,eW#NiL\`PR?eD_8+Y?
%N;M@^\PnZhH&;6)Ui]j$D,i^%"N0JHV"#N"UBfSJe0q5CB7^7$lP6%Ml'C4EUJNFoI0hW*/[V[l@DjKri;s<fX&3ej6dP+r17`SO
%F]<%^]k7(i4ZYuC=&i0_I]9AO]m*QGZr7dcHD`L1Cq3P92S@OB`T%U]huBGhRNms<m(0/_Z[Gk-1eXel(j8NHVS-@`7i#tHnn_ja
%ZZ$6#J`XK<3=<-_Kj(NSBHg@\%B`r.[DI3p9N*kTpSu6;)-JpS`0"UubTl`JVAb/Cf;'"!.RO.Z).@@GNZL%?T2fM3[I8h#EJTVn
%>KT=]q7Pj606Q:QdnXbHb3d&K3?iauE5&;nDu`Z"Xj]i.'l"PU_M+=;X>^2Y=o>MmQ-,Y4lGt48k[8q5,$V-U48B5ZH&[pFiNuOG
%o11`\8ce[7YB:^Z11MEja599WXNEi,h&p_Z;9AI2lr<7_L!#P0kYtaEfCAfg"LhZY_oKMUWAfQPK@,4jH6;>-UipOm8r%MX\,1ro
%X,$h\>$bsQMPW<#S=S7^#_\Aa+lYRDc4f`>WegU1n:SJMnSl'q!KF2pG8tNW[P74`AF#5IWNAMW$>cJ<)MEE</WL"WeuOcs48#US
%rhl+<]1_N-MZ!bk/bGoF/(K-VU-,Z\83'0$4i<5_),r_Q%k<hlq_)c\?3:5#ON^:E<#!U?.`O=rl97,o2(P]Ag8!'W8P)n-B3E@A
%Zr.KjF6s!sh<Qu/T,qU*ijhg:.R5V?<OTQ`_Y8(a/bCT=f-%%Hm=Kna1^DqsU70UWH]ln,#*?o^C-H2TXVG%slWRTi,c)sAWi#Jq
%^/;9P^U*7NU@W.nB(lksi!Ja&b%5,ZclhPmiLZY-mfc.qc*PI2?!:^PK#`j;d;-1^ek*$pC[FHbn(*NN@@"W7BUn_b6hDr`A.N*O
%NSldt#<AgOC8:_`lW#Ekl>SFgbgW'^n^h*R9fp&:Q]C&_:3(8lNqbGWi\kljG3XG9n")0a!mdL)?u#H$`Md7ShRE,B$#/)$Xf5oN
%5G<0n76M`@YjO,8e*AB`NnQu$CC$>X=9oCBqb:"fE+E.c@Xif&gKhl*je<)jZp7Sn<Dr"2Sli(Y)l+f*ZK***P:pSNr@2tMF0R2h
%f)JdbF8DLCWH\TloJX(GL9DWL^O+30JjfJFbU*LmJYK9rS'*RDSHHX6Y?O&=IX"C_gRo]$C$h"QE=0m/qk(<`Ub$;PZ,/uKHB:`U
%(A=SD*i8SCmp9Q.MIbrpV0K#jDUtumVp_=)VR:M&i:&5&S*s<+r^,#XK6BrGp9>2+[GN>.@\>n)G@;M=Q)B<oogH<8c.uW_^[CRY
%$Hci(<PXZ*V5#>3&7U9pqs*NPHii#udg$^m&W@()Fu_u)>j19bWci\^[^X>);D/JWPsN&1oi+E7Hi:G,p-4O_Z]0"!/6KrSMtL](
%/+o=QeEVs<48up3&+1&"qqVFR>ADZdXOTZ^:R,_.\a$;;^bnTNF]p9$44KLQ:FP!2R)obK1@uSTl',E5fuhI>IMCQ%4_5-LYoUl@
%=W(3*,c&O1fAJF$>[2\/fYplM]82_8kiN@HCuF]uj(ljS8roDnd:U8k&qrhO=M3F>)&%]::75q'Hd5*Co&>Fc]#n&iMG.-C4rD/4
%2<hGY$^3J&AZb0DYD,gDeRH4D$uj]ngm7'L716QXQ#t,006A[\*bSkXpMUkeA\!W[E(JYOWCe/);G0327VQD6,,R1JWUsnf7$T;^
%UgFh!rVD,f2:K/!o??X.d3($]:t+jJP-LB%eP7X7TTWmM([28u8AFf47Rb^Jh022R[ZaaoiME$+EB'DV[[c=<7>sq(<`)/0[WJDY
%h&1rhVs"`%$N8VM<Ac'0pq@PCV11@"d(bKS)?XXgA#R@+6gm!mh5`6>e7FsV4K,Nrbf)cG\aFK$`5KXIa#^$CfD6@^>cW6LMsAUA
%J<IRqc=B&aco/FFo^%$?_*[Ihgo_D26['G@a4I(&j[q=7%5iZ%7>gaVn\I+'p;?Abd6Kab<Ci`'<k):)P<h`3>'(qnPrpF6EER5Z
%06Dj?/]P@e+*VC:`u""!'IX@bU%kWCYSa8]%U'fSnG<Jb>K'(.pi?_e'8;=OekfPI6LAe>Pe_pVU]me5)@<9.(*&&oj.^jbp1dE4
%L[oU&CVc;X9#+\*aFM@O(fHYJ^0PW3>:?VAI@2D(P1Y;fd)Cq>&+p@2pS^EtB"]q!9S5<H\TV:$<=ZG]R6%*dL?KFgr)o`H)Rb/>
%)T2iT_C@k9Fqh,WKqmY-^LT_%C8#q'l5E6Gdc!_0'TS3Lh`a*)[F:tp#js&I24E_$?Dg\F\Q7lEfTUWreS5]-0iPPgOg?fbb@-=c
%9%U_669>U,)GgdL&][KQV]ca"d8M"3>"($KPK?>!5G+^&Xij&QCO3m1$`1KoCt0G`0:\*;m<'/MqsjZ8)X4c4,Ws3:.b8EZ+0"eX
%?,**M4[fSiPi=FW46X/^@6rkj(f?M#hXFi[i"tBbeprqV7WB9ci=`8$bKhJ,SKZ,cQ"WbXdLS=(lJXbh7pT'Rl6k(UrbSGUa*\I>
%eQ1["IXH(H0AECR8#SDl;R;WR,]U*\:9?L7)FYf`%0mU#Iq2fm:oaaS%RZ,5Zu_,TW1(0I3ni7Zm;?Pge[;KD\-K+9=sFdog2H5S
%&F@6[%ldqs^6c*,rAdi\$VT(*QX4`(;(/A0O6sF*7S0&9Tp%__`6.gc^9Qf^/MC0YZI:Df#Nf\&Gb6a?buDVc2p+9;=B"t3.`hV!
%(hEfb3tQ_\#F0%eY\CPYHF#GK'j=]#"tAoHX.coCjp,po7#'?4,""/_1/-=hMtu$"TB^(^ZX)"J;K90Zi;>;sa8BBA+0T_K2:&sF
%KU`."A`:81hl4!+NJcor)-`Md9Xc,5L[.Ho`54`l[quA<Pu+SZ/'3$tTb/EAefNUJ1c2AS_(ImYidD+le[7IPeIqM_\lJH\3HL_H
%h0$p]&Tik.UF[6X%dnaIg3E5Qrd*Pjnh^7$_91>@F/O>pG#>mE/:VG\nU@oO8@S"jYF]W9GLeZZm6'5aSuh=-]YD57lkJjb[^PWU
%W.o:^;-LN6\Vk%\mcOB/oY\q5j[O$loit^tDDp,@DDhAjce;S>:LEO,DA_5M[f#?/0pbYm^ZaotYOmi9Zuc%s2>d>I488EsQLTE8
%3E*'K[>5CJQV3CA4.UcE\GKn(CZYO7l6^_X4?Ml`g0NGr[pQoJn1f!I9tqb)CUDmNVp14%r27fI<k>l,>@-OS(O&L7e.'`*rlaOl
%-[5RSNP/?FXLqh#hn!W:0CALKCdu.ob8&R@Djq\Am_9>Cd@a^scPN5>o]b5Aghpj#f%,`Mokro:j\AMYibbC=Tl/YhMbD%VUA8ga
%HYK"QDe'XUHV7QrQG4tfB(*LWB>)U.a02,k\Qgd'$Wm+&?J7U#]+ePOb%eb1QLB9*.t<"Kg8Z\d\\HQtqUipV*T-_u"<MB^5J,FE
%)f,EFVp.o;Ge^i^BRbH\Y'tat[dDVr\XmLNGL`Oj2)T'QR![D19f$G>pZsiM;HbS`<suCVlMdQtQ"=m7@NSVS%e'*,2RC"7GM[-h
%]-`]mjE<aiG95MlqWF]7f;0!ng=`#mh!X4V!ho8=H?]\<o"fW^]rYYB*cG=IYZ<$#^+Se%lDH`@\^eR:^&5"/pJ#a>iJZ%;$5]CR
%PdB,V#61t#356V$D7nPN0$7gn\%daM[!14V;=Ie$l1*g$AM*Z;ifS'@c(g9kdao;-Gr:3d;gSaRVV_iJg3OMCiDV]=Fn*ik8pLWY
%bZe;^;kEEIf6Un.n#`e4bXq6g;XSr*q7#`XiVqXblg30FNMj>9a-i.7@QSXU\%&%jd<(I8`r>Vu%TP!lhgYIa8LKlO6+eperHo?g
%k#BdRVuEF(X67ch[nAi[e8F6]dc3FTDo=-!Aa3n)<*ag`A\<GWheY2(?Q!YVDk?GJ3G,g9d0`'B?J;EkT=\_lNd>g4rM^EfMl*GB
%oqb0L`I+h_DCNoU2>X_UPXRs#Xg@ldqFUR-k2][WdlX%)Wu7=OJ+_\WDZP"_T(XaAc?)i^kK*>eMt\,#ZBs.iqs?1Nj'g5K2O>0I
%nBlP9&htWIFR8C*:7nLZEuQW:o%:7oe%+;<G!U-LZ)Z+>\*ES/_<7s!I.mK+USuMb9)3;&qMmRMT68f>W`Y>=KT04']gqP#St=__
%e27NsL;r0mjE@[A4R27o#+1CQS?KW*pPu_p>`h3%[s&b"cWk[.h0@=)-gSC?<Fs@UZGindjhmeci6Lc>&?g4pm9Z(Oo[*aPg&BEp
%BCDJg]j?(3Su0uG$[WD.g8Cc^k4m-+ghPNP]e(-^^]2g+SF"i\2IE*C(@p5*bI?!GgA[6NB`m[/p(]H*UJqSP:#GheIuej9U\gIS
%9&nlRn`njl=mfk[.C$beL4+1>0V*Lgm^PaB6lV9m:,bu8HO&6;D^T9nKKQo643u^^*"rWKq>BK0>F19S1#SKj>K].pqUR"p'Y'#l
%Sk/O0,Z]-SgWLt`7l6>]hp<-gH["`E,>73<1WR\.[;<DOZ396+Tu]gnq=CL7q2K7_!Ir;F>Wf*EngF=($X8m/8fI$g+l'$^:T_)F
%`ocTn<Vu:M]-I6"79'6LZ$u/mh$cJ1;7s75'AHbP4OG5*rL2bbq3P*nfK#[D!7(-W<(Y2e2:]%ZKe:\UB#EH0*7[0I5?/N7ed8dJ
%[uU3i6i;7%XaJEo45%:U<I;-M/h^haobq"ZQ(`)/D#5R[YB,oD-d`A6:^lZ7n*s'@`U`$)-JEml*MTs^g_uVBjrT+m2n0-9K*"ia
%et;a/T^7I`TXd'K2oe2E-$Q,TI^l#J6,+05UVdKIDk`#>E0c*4guKZ@2u&D;j1-nZ>qI-$1\]Pj/,)@Q69Skh_m"W4]cHg^j5_+E
%[12CJiUAW?`7*@d4aJ)#+8::m>k]p'ifcVDIKP_M9(2;ZJsJ)EDDFVN)^*dckAfcK7Q:*0TG13G2rp$)1q=KG,HC>`\IC1SPMi2`
%5m,dO=6^"M4li>G?a8mJZpJU*:q@Km8>VBbXlX'1F;*>&=:qeh!QeY`O+\GtS7Y=oq=l4"@@RF_'khcmIY;%gR,m>JCPYRO$!PP!
%#V)La_,E#ns!(p]&J2il^il;?&eIFo7odB;HQ;'V8j7h/<o:)(B,H7aj>l9=(2L7cakpg1mi+:,-L<(TTR\4-o5KM(ZuY+F%O,pZ
%Q@c#k8NmIF>YoB)6)/YnG+:IcquC!Chk%`qZ)kmea7I:;G3pdYe)pcCT%hi^oJoL0Y<$GKkXK\N[ER%o`H+q.T/X>,>3=o=o,>$2
%?L9<1S.\8XMcN5slF^BSaIfn:*cA,2LUWSX?b_$SMqXH.TumJT,GMel)g9W'CrQ`$lf;2].:PrM0%j=P\#fJ&U-AA!chaDSGZa\9
%qn7AH^Uj<$m?T_(95Ms7ok0/q]s<$'jISU3Ajj8a3qY6u[Gt>Vj7[A5HYID@1&c$D]#em%$Otu#3dM>UN1u*`%k$6i#MH5s5RFO3
%k(]sL.#W(Mh,)M(f8HhmfHU+clmVV0q=%%l2DXFD:V3%XDdL/E@sbV&[F72+RSlT1ZaNE2pm;OBSTI(h#F\A[_'cX4d$egdqW'fc
%S\Jt]YEf\`&=%-_b6luhf5?*%1>Z,aMV2p)N&RA*"`hI5n2>?Lc[C4_ROs#s<nGZu$Q#Uq5?)>l*e2$"[#[h%$udLljJ:(L>kun(
%g99-pe4ih>k]cA9?CPK&ODbA,%g,&9j4qVrK.!CKQho_qUe`&ecX&6;bH@-Q5?a9:7IpYW0V#/1nT72=+Is&1pXm\1534)`?M-C!
%HL(sTQNS3EM(jLZRpIW/hIAkAiDqpc>'V,l.reK6ZD?oRpH2(sQ'UuJ:*7*YSTjf'f%#Ci%6RA>1%r66I<k.pa*q'Shs6Vq\arlq
%bdC"\Pd\P3AEt/^ckRPeo>\HoY(>un]>a.7k>)WWjL8oq0A;"^FdN:iQLCu*E9uT@Z`TRLRtT%ul3ljCke(-@]R4_s3hLaqo"PHE
%^4&iY6!nc[%[F`jB8t9Hmrk%2n#u.i00e;s>C*r'HKru2V_kMaqYA^mrY!m-LZdXY?%\@)o@B3#kSA[,'6N0L:tA7hM?6ZH!d"?i
%Yc$VE>tZuR]D&")q`D<MI_#+3FlAhI_hl(;rqtShZ?S$@`USQPbT-)9^=(^tC206ADRn^e4Bh)b*XM4>I.?:'e_ud:?P7jbDFi\d
%(/A&fV[`<8F8aYfFMu4tR?cOmkFKMoR?L^+G7XlrgM7NMs)Cu8&NsD+G]gLe`NA4ekC`Q8)O(W<EO7/3m)aFV*_OB`gK:d;pMso$
%G8tL1Ai>']Eb$lVaVQ&i%h:,Uq4.7e>C-58e&1#hLH$[>l]hC*8@s52S\2@SHKe5iZVE-$<*Is[Hh$bYOBEs^m<gK9SXW$!.ueK?
%Ec1R;qPHKRpQ909p!Wa8"gcpG"5M!]P3hhc,87q$gSu;W2Ij>>$Y/LqUVE_;5&+pf4g`KZrl:,s5Y]hc45V$f]@Yne/$GR04hK?O
%H^eAuZmJ1mE&tLA/Aa?3hcWacnVAlcjcmaOU=h0I)STS)H&[G><\UU:Hb=7seoK)4p2>^RY[:K*:.Y.C\\!9ie3<!>:NGXQbOtg/
%`n\dcfIe4G*cu*nd^a\/E(/R4]kt5Z?bF[Sltp2f\t#\0BD<F(S';\WP;ta/rNoW)m$uPA^NgYrH%^-_Zq<`mpQ0K_O0A,Pl^+[.
%]kWVC<G@jSDILu-4Xk^9G?D.G`]7g>Ut)BHQR.Skg,Z_@D'cr!G9:pTTq:Z=C1.3q]Z#\6XDCn:auQZMMlZU'j0aM`S*LMbm6sbc
%j`7g$ZMnffOgS*Ols!O'Z#AL&j:q@erI!2&XthB8K"=s%mPp*4r2mWBG4;d].7c4`*a7R@Q:Jp'+)(9,p+o2dS):d_7!*LJPq>5S
%Df)Z=(CJ_,lg7I@7J?D<5]`0#Yu*-&aR'b(%_%BU>.\G?5Ms"?P!jS`?[VQXc[GXEhj2u9i9l&Y-?=HNXZsRi3R;!dq./,nNHCKY
%V"2Epf$:ri#k,[NK=_Mh+S(NZZdnf0\;sDobW34XpGdYKk8l0g6?;>Np?/XH,!/\L-[qu,ICAffEG^1ss,]6$\T]Pn02HbDG5%en
%:"%%Q?lf>,Y=frB&B`H`q/#1,WK3O\DtCO$'/T-(MXe8ZRI-2sm2fQC`g<eWTt.#l/&J;IQ%EZt^m9;N;Hl<ke@%k.R8Hb_2E)[9
%hJ?2,b.TuUG["8DgX!<eGILpBIItpsh[`eF9ak=,s2>m[9Rkit>j]6JgLRo;h14'g*V/_<r3Zp>NV,AD5.l*W#1cc:edI;A#O`/W
%RHO%g;Ikq44b$>OQ)a7mCi#$JoFJ)W6>e>VErF1X);2=3;2jGH9/#R;RA[UA._2m@jTTks962>MWRPgl=1=**fP/"l,.m\+p\aj,
%W_hW\QcCWPD=r92^Qpmkm4[^n71o_NX4F%nk4+bFcnP8PW_cj^iC9*M#;e`=NkecG\`^T6ZX)=!A%?[U0#+Bm:MJd'BDGaBQW:>4
%?_N4Td14U>ct7[bKUNA)4qAGO#QrR?Ys8*jEgmGb)!6-nEOVBV00d1\PKt9;+6OFY#4\*?hSlA+p"fs5V,WEW6&2HV+&-A6j#bp&
%rB/ok=@ka@dg_2igO[]J,8Jn_H["27X,O<nokJiYFnQ+M7?*kt$G;VSnp=[Jg;GN1#'=q!\"u5I5N+MH(rcGd,oG4Z1\JqDLMU,t
%"<HC-?!DKnArff=E/a:;%lCLs>-;hWo+?_t_TjNakiSlY.Gs"*Ij,NX]ZVd^4FFOppN,SObDcet5.6dCq1fKH/Q.Re"gTsC.t!#]
%m^^<gnlX:cp*sqo`nV;)[/Bdkm67CrY8hJFcLZt?GMMC;1VLO#GR%ST=LgS1S-tfaZYj,d<Gss+,7;r_dtZY8TtK?%hWPm^Hi<'B
%@HP)k9'b"mb[tb%>&KH6gT&+=/7)>Xr0R?cGHb+eYdSP9h(S0Ol+cApU>`WTe`-:*rTQpU\R=<J78N?bq6XH&Z?pr!\ob-:bRP>M
%-SO?)EgJ"Z$!g8Z]+<`iTF1dAIS+DOo\haWaELuZ39f&WrO;TLSVFUbFLK7-+bMmd\oX#!U-n9(]j9=fqXne`[p+08-Ur.&()QR%
%iS>5]@@9`]ar8`Pqqg`m^[&U[m9W$=<bf.h4!d_\EouK$dipbn[THP)bkYD>XmCMhg$#n$88TfIXM+CVf#`F;XAqQ#H4VRq5"\P1
%]WJCVNps:5`FLMJ=!'t<]NraPheV#Pg<\N7nu%cFC8@?ikN*(TOk)mHmISa\%_.h9f1(6ddn*+b$5qn'rOT&DGn._:j6X/,Ll<H^
%Dn#4ZZh<8DmG.;GT>'F"NR,(DMtY+4R=3p7:@`DT>!"gUQaEnlTY@pHJ3A=L5AbmRa`$&1:?#oFTo.tO%>Q422chUPl>V#]kIks-
%EVo)Jo-SZihCFAO/EC2E.S%:c"P8g[ZHXo:VkVkf%iaEsRD[:hg4$)$O1Q#Vl^R/\jbha.<UO:@[:jLBgYVZ$oA+8FJFCqI;TH0=
%O7NoaKoE@$^(&-)NaQ=WXi'o,ad8p+q-5;bVl_UD%Cs6:bL\NH,Z.>YCgF/]X@Sm.efO]L08SL+G>:b=GY5'nQaaHJ#Plp;dTZ&_
%_E-ef-[4W.bNXA=3NDOrYo\CAE#$e*qeRt8>PC)M[[03qh4j1<2*BRRq'(CfYtR"s50KM1oo<_?4at!6m^2M<).p+4##)]=).=s=
%SVrPbUT`bI=O!1.T9)h?KGaFSDd-(cs5d]/<4-/J3\7D]Q@602?VhQ\\peq3S9oGF>j3iqJFp3TIlku\ON9*AfkZ3Yn)WrN^Sp8>
%l^sKqdF?e</NNis"./T#:++lmS9b,5JJ07/*3S2V/p;,^Fq1,/-a(2]Cd!9Zr-BsG@F3BCG.gD+7pGeP]su;Da,rQ0e$k<k[?IS>
%CTSe:jWO;sr9d<j]`M6=p8mb05K#cuCqh77GX$\-B-I9hng:T1aF\_Z2k><(FN9>`?"r3P/tOY]@+@B%Yj1V&=T)03E>pV;q'UN1
%rUWW/F-<q,aYGH1'u%82=H6'<j5n/ZMMCcBbkgJuVcR)GD>-HCICf3LAWA:1X+"j&2\&Kf&^),HE(i^VcJRC0CP7gOl!*me`,\u2
%ZgrfmZL[Fs[XDq&C\=u6.bo/"hDArZ:N8OF9?ic@ICR&*oW\*BVqbRWZ,ekBAKRp_02ukR1%=IE#O^.H<WBhS@@X0K#g:^`"*&gm
%</u%W`Ss=un+^Pjj'ebqg_r_(035t*=N#f,O__1e\7'(17nN)K.NQ7u;K&GN]u>Ke+t\Bj%s.PF5LikH,fho6%;-%XO`d`F>]/bT
%c+n74^L!rW0:VX7Q`L.bM&/X-!\F6*B=M8GLjml3$p`kf6[jVj>@n)Z/0*4kjku#aAm.PufP)+MSkuiT=@0`N`J<Rs:l!?FETaFb
%[Ia&pqZo-P&hFZM(!c(8Ec"ols6*DmrGLrr?1gk/213\/Y<pj:%7@!7R7'jiE76.ZcFEii>[jHK6D&ZNli"s2I&AkuA'[!d5O-Lo
%X\hCXd1sl[(R/7G'$1W^3'&5(Yg":L!%/+?Qa'iCT6ZCJ8&$lJ-c+=M9cL>0qlL6=Z,rNd^L)bOAW"b/=eWN1puqt6"-#^5(g3:5
%.1RG>HrF?e^l7VFE_*Jqfm9d==+>EeZq0<MEcC4#HHU@D]eqckj2B@4h0#K,GY!.ROo2'U!o<?_.t7\1&g*5IUjjT4DJk^b.H[i@
%588Anp'\6a]&("99$u7g8M)^B\?XZ'0!7]CHf6:&iM:iHY5S>nW2asEL^5"0_^joX8=ST6^BP()e9Wi!EQE[$3T=)JO4?h.>f@Vr
%n`!W,PDYONdi`C6$PqIQa^qAr<\'D]o"Xk8kZ,f9.Qlt,>!K5-\Pl6IR<oUsie?1qYB1;mUH=CcYi4%b)@^W'lkmCjo'4u6lZiC7
%K&"c\0_6)>M82;m(WaI--6GTajhmu3g7LRh'NocBa,,rlAdXJ+bD[]61#mXZ'K![#.@a;4gP.F>=c/\IKH5[`C^$6t&b*[C4GmB-
%-/.M\mEjdr%EYsHfb0QI`jSfd?qP*:"drQD^ok87/X<22lA.`ngt)WgG:Zr,,LV[t.)TDN*oD!1k*V:;a<QFBB^:f"5ZV9a*++Mi
%r[c460`8d"_pV@ZEHu4Gri"5RV1ic@<<QR6(L(9s62ca'>Xa_#L`mSeN0;#_>h&g39+EZ>SZrad8jt)_#a(#\jaf-M\m3`QK<k,K
%4Io9pDQjEG;?]cDO\nr3h-/);_aFhO?8fgD\*,\6?ZWscNRCaI9mMkV;13Op_DKX<G@+mQ"q-DK%'=:tR6oAT2'$&j'q==)W11m`
%2KTYZ>;VELOgL1T_P(Fl[&,e=g$>s<,OmH_L8H1%PUb+;G/K7a_mlT%oB"nnn9Si3^d8.I#&]a`qmh,nh1g;YM\*@"FIsrCo#U#m
%(N-5?/:LHW<CA(:>p[^Cg/T\5O,n<_op[_R][CPmMijo_r+jHe[Asu_CldFLNi)O=\jP7$e9WoWG5KpPCPD0[bj;3+6_r#Fp"adS
%8B)a1V\^(QB9A8,G<H\UJB-e,TYD]^f!DXVpKqZ-r27nkpfB8rPjRK19$.9Un*KMX(<\n&j+ZBkn^Pu*pNp*1eS^DE\uU^U5in6q
%]]tjR0p6"/#F9[ADB[8A4Q5A*$Lu?)q"=Ag8h,I#Dh%]`=,6gZU^lle$.)[ND[V)o'))#Hrd%&+^(Td&MX7kOe;$glWq85uH1^i<
%VQHZhC!,_uJ)NO\rk'UBo*5s855=$,&"KkA^ga"M[RLWt3mgC_9eaAF!r2Prd.#W;Ss%AunX@k'd^u!+4J3R-PU]1'm`"#9GI#(Y
%?%#/!BBr:?Tj`k]XngYbI90TRdG7tDfh0>g7tQA#lU"<NlNeB[kR16`s2B:V2g'8(%1foI-q?(koUXNk=L"Q2"J/,;;Rt8f%]7YL
%;19*Qm94#KI^'^^>.l1gZfhh]fBU8G01U085nuM,*8\hiOU$NNb.WYoPoS?0]23`oD;N/sZVYKJpc?^;?3u)R[e0<$<bh.jlKt'#
%02"BaC:Qfk5$5DU>4dBQ:6QAJHltk7(c`JnNh`;,C0QFpi[b#HbYNGJZtZ"5C;hsVQ9mHc[HY8cG$QR)TOI.e8orcEBlOVM8-(PG
%RRIZ(R`,i_En"'NjGBq7D:@#QW*&\c%tpBl9N>%K*Qq/gW?M@;a$olOg=#3>4jf^pfaJ6,,Cg_"`$e/k!TK/,%+Yt)H*Fl_nfNgK
%5hQna7QK4A*X(LE]E4Y,V,.V*;)%O/Ja!mn-10?>M(,o>9<fN6i9E4r/EYg=WIKOiZsr5I@5sX%bt0Fg&I$TR1coP9DA5VQ'/'nO
%`9[\AL<_Re^bhC(k!H?o,T1_rFUGbP+kbMhI-@/P;V+dEW>fR%23"hq#UCB[*/N!3g@?u`1EG/"CG9L9?l`4q-=_j47^3[P,F7ph
%HA_"ks'ciS/3OSPC5(4jXkPJsJI'a[Bu`2.ark0"9N;<g9,edP2".B9V5?u1#1RbD2D$TEb-5SdFU"j[W[NFE>1JGKkSF7?;ZJ\D
%35Y_qV=#o9<7AcpLkJdYTO$uCU(31;;:)=PV.gre!S,UT.LTfFC4M,eE+j$T-41rB\o+CZUE!.>BikF-9L7c\[Uff%CMGmt**NN)
%L)>V2CK<i'40<9FO3pO'0Zu.7Rc._)F93>Ucl9>T9p>*'FBW7FfA:Hug8cP-@f?f44u0U59n[&q5lMrAIpqjlgX.pH*tjRt3\s67
%LdVA[`P?Ue:]P?'"8$#*%bOJEJVg+F*i`ZM%)m>,>$70RV@;3Q@k)au_.lo^X'?@>XI>"kTZ!O$N[R9ReHC^%-%Uk<(gq:`M!NL%
%l&OLu:j4ME/YT%bJV`5a^TJ(n:9;"#T\g`K!),'"Y65RD&X##R`<r>R<t_RMMqLJ4>h)N;Xs(DW/IRe3MkVrBB]-:Ud>(E%^J:ZX
%itWdb.hOPY"!S'[Z4\-EYnTMF*u#IH$n<KH3=UKE8VMsHnc?L<$F3>DZiYEJBPC[n"U,Lf;BW1P<@&gSJuq:+Jm_-bdVb_7_/;,I
%g>OY$/$U0i!\k>I=TPS2B^/<_)R^nY[U#V59V=rkiBZB+:lqL?d&ps2C+td5A2eTl;Mb'-a]4OU$HS^Z3CN%bJmK1Tr/eHRqr1ZP
%AQDO-;H!eGVaHtR8krh'Weu'\M32#0G?a8a@XHO6JELB@%Lkbk:0";>"u/HhZ6dtY6:%jhW'ErgOOO?VdX;%oC>:@7P<q%ZkM!js
%SSfjXRVSpt"UDsrTb].;kfe']9D(Ulb7RRD"<L>iKbdX/r/nrQ)m"kNaNPQ'RV3O*`MOm>W_/rE@&U(sP+2[0Sq&kjWX>]aKL!S@
%5ak@jdl>DlG5k_]F<-*><6u4UA^LE!&J1X/L6Adg[4\+I4N#]pMs-7Qg&NOR*6e^;R`bRB<3\le`7.JL-Ws`[1`r_:!\"b%R\h$5
%XJFbL6`'<7@]E[u&DZS1J%r==RVQVF0Vl\@#*t5E2OPLuVPY244)"@Laq/S?o-a?b=&UCt_Ple=:NVf_"j>"$N_.enAPl^L!A!1[
%A1"C>!C7]cG_QG%"D4<2%Xh6/*$b9_5ru3bYGs(j"%^lf?=>P/`:TqBJOnG*!oeh&V'pB#*=5?5dYRIN'+m1_RO!qcMF]m\."lrT
%9iFS;BGRVk:sr`Gg/cUQ`/GZ[6SKhhnd,p4pq!iu.i:&Ca\i1:,INCmopM08^S>S-WF_GL9*3T4<DAskR17]a_S;u'?Gq\+eJ5u&
%WHYV^!iSciPh);DXn0iVoXI_WBno_u.puN4$lVK[g\l8THnC!kka\AO)Q)UP@L"f`NcuC89<<^Sal?hF80]s*P;*b2-r=6Fj6gXR
%?^<=OLL&0^_aJ`5%h*uK9e6he_FS\NU2kd?hJIraV+p;DBJ]^XXq*@:7KH6!1'NncS#B$pWsTCU0=2f0)M'B6(L(X/B[M@)?j`h>
%I=aa]2?cXX/HIV[O<]i^elGgJ$>i@7WZ)k@DZZoT/6'Ib9[nda$<m`X6Ro>F[\9Q*rBPp;"O9\UYV&2<c.t]fibkIe6$Xjc`_)34
%&l@"P"CF&l9nFomEZ_0KPt]k-<!fsH1^rAh-A\Z7LB3HZD8GuRV!C>b!n7i00L=Y4@$%Aa+L4&\N$G:#ZD%FIS(&h6NekHVP!]f4
%,Y]:%;S4P(8Otg&!]@9$7=.jhL_F6Y&dpUOb2>O,@2^.+HO(9e'7>d]5Y'E.@i;9b=a$h)`'LK@p`N9IFVXbSpjHi&_#R@BQfj3k
%<["";FVR2?(mAhC<icoaG*r!]&TFGsK=k0gC+N=t7Q'ZZ`t<%o8I6gHF:tgX/YJmPUEDB9eIY?T@Y5XX"%G'h1a^\:<C+hU.lXj-
%)Ak2'))5Z\7%kbc/9oCG@2c3`fg=NX\gE0)$`HB--5@e!;>:]9dM1E!%'nQUTh%>#X&9,ME.q%u5j&,<2cKuim.;ShZla,c;Jk7[
%jddUF?W&<VZ4?C])^J$sWsN<NkdF=A+JK<:(=4CN_=%dLo7EYTWmB#uoZh+*d,G6#f;q5uE1%1MYXh]*6*'4,YB!O%6B;1k_L*Ie
%'Uq%uWXQDiH9']_=P(=H=qO))#R<]:(*)4`kS6RA.Kfs4GD5aKn5h$"lN4"olN!ZKMBtPr*FuMi@Z&YD1pA6+2.56BZ9];66N<LC
%Ac$cW<l79$6Hl[O:i$RK.k&=d6#Bg?<7jlU&DM#?odH7U5R-Ie>aNqJZ:ljDcOb;>RAH)I<<\2G&m2"<'iR$RC3"6Cs!U3a_mtMR
%3`.aS:SM2$AfH,.QC*nm;FXJg2'ieG!&Pm/H_NA&rX"iUQK#t'E/7<b]@kUa6d?c!0nbr&*Lf=$M/AtQ#+7)>4F9<r9*\FM=%G8A
%YD8R%*DY`@lB6"aBju]Fcr=(gk[n4$E]<;N-"@,ce4AZb.QB:cUH&D]`Wlr.9nV./0dDITQmtH43,Nfp].VQs7QcO`AXF-$!u>F@
%d-d."RREkOV3*_b!E#-S5K/=j$kRM$?<[e!&+*;4_/9SE."8?<HSb^(7qIdbe,Eg<`N91%3^O+'J.-ZQ!2Z\BdhGLgK-[>ra]i-Q
%g`ZM<BTTT;Wesqf+ik-0["0iG&;op$Jd+Qj8J;KL[qFm;qcEJQCNC&-.NCm7e=83AY+l<q<C`KR4B34STE]3CL6=t*;c50L)Oc!%
%Z(*CIOnL0DT%+U<#AmIL5_I?>8!QL&(Y(bQ\c;r;!ULFYCulknI]HqZ+</MrR5(*Em'%c3Ei"gU^jn<DodQHE]lWZn(>thVA6M1G
%oTA2\0a+iDq&j5XCrq6hcNT,l/+dnK9Y+\$5fK\\*#@$qA1Of0RtH?gcf.JjV5h*YThs1A#`^.1l>0;j/lkh#QD/0#+;#l$)OAGZ
%&B,rJP9Hf>?6T+nF?n9[fR!Xf,5*T[K'Z]AEQ#L<n>r;k''Ktf=CN[u$Bb1VVHB!"%Hn4.eMQFj@^CQsQXhEB1#]6o+CUH&@lFs[
%ftcD9DM"V8)NH*J9H-GG;ZIN1X1Bj\X+i+7Qg+;#bHOA%jgl))k^q&>VBP]+b&5)QN>caheb6Nie>s^[HMrW3Y8mbBA/YL=/%UX%
%#gPg&UaE3&QV97?>JV'*Ri4<1']p&<'L);l3*N[H7?9_.U/2+PPP8`m^E5"1HRoaL3pg&b,%D\F0b<T;LNUZt$k;p9iFn'W4#@,p
%MWlAmn0$jYXP1&$'BLqumQe'J8/Tff'nFL8Nq"e4p1l*<N,I9'WaMJ<foQ\j]LZ6OR3(OY2NZIZ35bB>0n)\t]VR^V]Scch6QCi"
%\;.tF#G6KM"<kUW)%d.2,Mdp?N%GeOX8iM:$sQL?(h(.ar<Pe$UY$*8nZh;biOXYT1!ZJ"e=4uTAb$[[k)=4oF\frG6iZESq2<:5
%70D5b+6Cu'kXtjiHCQfuXWY'gd>'YC#%$[el'[k&if!n5AC]fJ4P+&k9dfOhq6`]c#[;GO+jFb-Et)+_I%%EYa$u#ABu)+=2Om6k
%VP_78hubJ0RYWc)6_K2/4<#W6Bd3%!#/LnJbEc9aYS%''ACcmB'ks;$d[X9I(_T`*%9N\Ji7X"k]?(<C3/5mj^\I1d+Q:t!JX%'K
%iY?07incb8`GnHRZ8Ds%aUem4l/DBu_K@BcKO>p$+3q*+8VcWUdVfMKCCF&:e\9Q!p[qb=i>VY_6j-7@F>I'u2Q;&mj<p*%MVoHf
%,9[?T%W_CDY$-mr3Y@a3ZUUK1cW&LigNF-\X)j)Jl=t#G4B`#L.f+tLd+&s=n_h:E*("e'poY$_$$Ge;d%H(b*%JSK*?-W]aEW#N
%)&EZN9WP3gN;M_'R/!k2?RC>Z><%9TGj42uo'h.L"nSeMqqpnZ>[sdP?Fe[)""s8g@bjE)q#JteEGPS,K=C5)Yt@EJ,Q7lZl+"03
%+DON.!;?Um6#]*ie.',rTEu0Pf*.;7]+H0G1(4lgRj*B>e*jM2+-MTmcA1foW9%bk-pXs'>*0jm87Wht+HJHt.mU+Y7Xk=,aIc]Y
%*/n**fCDI?I!Htk\et!C.LMo`5\'(_+9Q9$>VKh#B*Dh1766]qp^6iDp^.24,?+&T&H`2HM*V#*8"0$Hl^aA^/s6S-S#=8#]D0=&
%jJ34u@06OP:I%ptN^@l@0NJbF$BTrlDK1bUMRuZ(W+'_^YW7JnNuMhrIO-B]+/=MW$)iQ^KLg7@(GbA[-S\FORM]!4449X[>jpJG
%WTt:KD#H2]1eIC/kR(7Wc;"t*Zs5fI%\S.MC@F[%!31$hQmEjZXq8Sq`'sIN3<HS9N\67cD-7./ZW#7H,q']STS2_>W,7u#-qsg'
%kfd]f&Q!!l0rPq2UcBO'hME--/gI3a$?CM+U'4!X!?uA[$ZVt+OOqPSAO_3#==RMlLm(5;GoU?5ihB<jWYr+8h\n,RP2-]:<J%OH
%!D;RIJ.d?k63/i%:a,0N"q!g5K8O)-RZk8Sbf_ut#ZQTK7:"<iRU]Q2On?"u_))RnHNL3tEJI@biK,QWJ.r)L_$ERVjinJl`Yara
%3>;mke'b7+UnZZP82`Xu!TZ,TcHmb#5]dTI*cqqq"XAjhr?4[7o+C;ZQTrOps4m0*#\7@AMD@NI,ib=<'VgTuJU3V&K`\&`M@jDL
%0i5Z6,#Fn+7@Nh9=esp\08tiE_@%@n0nN7N5_eB6d7tmYaCo$Z1$hGP5'">X1WFitRuId7Mk[iq^2V#'`d"2Vq-Fc-?f4g(a4Z5A
%,mF^d:CJ`*<2;CDR72F]nA<6H,J;C>m3XCleJt(\`&ig,K$hN0@b?h*,]5d:1(e:9jb;Z87<r<$Y5ufPB0TcT&Q",_`Lqf_7@KG<
%/CJCV$R6l)H!r\3Ibeu*K+;@`?mH>_5NG@N5%;4sEc#--A+!+:,#-YQec]8;X`8_qMugL"l*Ftq'-n.H:Ce=7'G<*i&EkpI86\:T
%MKBbW^ZYYbmK]\+ku"C^fr,tB"J_W/0QAKO3ng+BXO"hDdGE:k>\JpL5M&X\+q>m8r*0UG-_h(O(WJER6HDT)TRbk:TRngc>4]:+
%Ut:_(7E-/752)`FWE;b8+M&`=aY)QqIk5Rf%m&.-5ceTn-=M1oHnV"h.,PE11ggjQ`!8s]!fCrd(f[`9899r<7Cis'?=\QegC#B.
%_BP332]i;#j+p%`J0U%FXEs'jf6Q5f'[R!ugHk<h?T7MAd5DQTX@Jq1!c$t''FKriR.<SHMMiGdOG3!1VC`G(7%pJ1$d.T_gpbkj
%<2<kCP`:[MLLM]Pl,qPN:k/u1eKUR&62kOA:k.,[k'Z7dbfq!6)uCAgj;YVJ.qBE5H^It>aQoY<]+=uE@Od6dB<oU9JM^_G7A)[n
%Ke+WV6c]FA<nOC)AE2^6cohCe>WW;Cg%W=,gAERtTPuH%-kAAmS4'L*]M-6f=h*cNiZlA:nq"&7npuq6`sj"6d>C3uEK)aa`(f,[
%;n-L7A0'o36K0NV6fT]X6R*6tH\b&M5iP%(PSIn*,1U<qDMTT&jI6.[n0.ibVfGn(DBLEqf$_rGgt_&h!:o!)D'1X5s0%N"\;(*[
%:d_aC/i"OLC2&(k!BRZk$MJCQI+-6V<DV4UOF[fn"B'5X6hn64-'[kc^piaa:q^P:E3!bCdqS1h\@N8j+>1do`7kh>"Ei82f;Pb/
%ncJ>/KJA>,]spesR_";YZM>h'h_1+YY5pM49.WW0",M[nG2biE:;,oec4p"QE6[."r6[ff.eKER)Bq$BOC3e]DAVVn_]W\"k6\Z,
%O5t:c(DeK.*iL[oV+F$T>d:>2<1NL=jrr5!L[S3C2DefGW'F1JOE-/ME)\n9ZV!l))$4@,\dsEQ"dt6H"BV0=6+bQ*YnF?2+D2/)
%>:31,gi_W!Pu%N]gg4&A!Keo#*:8Ts'jb;`[sCSMd("($&B(WdCT?@5*FMi=_DkR)U;IQlS`"G*/P_jH_$sIr#WkE;1@U9]/o^!s
%K'%Z<#Fl226-Lf/YDP:UAIr]ie$n<r]*L]BGL=@CV`?M#?&KJ!OTO$//293APWBNR-a0)`H.ASLK$eW&)aK(c@-au8fpcrUc#a-$
%JL'?@#MbPA*CTPY&sjK(]m!Eaa]\E<Fu[g:717*oYd#B%L:elPU`h^<oc0)D%T!U]"KSUY&&T,_OVZ+E23ONR+C$Q7jC.lnOiW*W
%dt>5J6Plh'2u"'p1oR?>"HnYp7B@E*e,mI#I.,n1XK#uNDaF62X)\K@W>N(r,CBm2-itbRh7k+%bH,]RUhe)!TGA,'!1"pKDjfNJ
%_RJ&'m/jg&?]`\q8"j@KXj4IO1aJ+qQgQ]Uk"%BpfMFNe@'?#V).;ngr+f\Q$;q,e@]2`=O^]YK@`<'[7D9J=Whqf."[O/F"H*Z9
%U?D[>,5V[3WeL>E)U=%Q<TFZIOG!tQK,54^`AA5pPOIQnA:lYFJ583a?c3U3hPj&W_Lo+%'H)(oM\R2<T3h8'cm!l;iN$>YWeOF3
%2t'LNn!\956tN`A_CAH&]3H"G"2RP/l&Glh&HMkU9*-c;+jTZrC*<$V6S61g"iWM(KM.(Da'auZ'NKl;6=cMD-9"2I_2AMZcYX@^
%gchYb11IhbY:D.0O<S5)h]+CmEmB_J^OYlX?oUE)IeiaH/-&Oa-\AMND/;scTlL&4?0>m093c>pbR_>kH8\Ej>m8S:;6Xi&p=[PN
%>FrIBeSgb[8GQ[sK%&AnI6f(^C:#dB7TI0!BgTs'Y.klS=-ZTPXLRO$>!^5uXbjGC\M\p89a.9>=Be$M1U9FL6j,!;:I00>5,@r9
%O'mHYHh:07W^7b2Rd,bV2NY,*>us'o`^dHEUh^jR5ocLn9a$&'aDuVmEaC$mqK4ZfU.sB!@r!8;qM$n0\<Hj8("kCuDuUj;5S*OM
%':]0(E%P@VEYj6cdN_?lSEAB\m3p@AaOOe";:5gGC4l^M#HsjjBbaa+bKgcPmNR%X%k8QBNu_[Q!uEIq3o>]^C'N9FqrseW5qbA.
%CHnr0Ml;)snG@O(s4BLX3_$D#QAJE@*DM=r-mLi+%T;-QVC'-;XJ%0n8[[%bUp-!#+K1T/;-,JsV>t`J6-Cn,P[fW9:CLYX/HAB9
%in+M<MA6j$H"*mQ+g%eL=FMaf9-C\HOsof+T?`[1nbcMf</%DM1]$;LI5I!;'dXfh/2HT9Q^fO)/QYb(-]9df(qM%f50)QkE`rb4
%.UnS>\[+[*L?Km-P=%%E]#2WT#cObN'ED.PFTdMAEqNSiil(BGJMqD4]#?:#lu&NFdFMCOhB\kR<HDW_,4>OGWp3M%'<7QWQ.%6<
%'H+.mA>iBH<-[XSMP;7s3Dimha5M3V*T*4)C88c"QutGiNtVV\'1<n)9\=38[)1c*,T%^;&8FF]`bO/C1:Q4kL;AkN3l3a_OY+`b
%[b!C!'hdE(LXF/kd7#ZH`*rZWHUU7Hp+4,"1m%R3.\O4h"b8t%lsPIo1>/V'WRHthUlUM''m4k^d2qWISR@82arUuPYD7=Vbo%dl
%?Qm!N<0,SUeBSCW]uMJgCUnYWpfZhr1t[=J8>g?^HZfbQ>iMHe8D;a0@O@-p_2lM%"WF+LW?P5C7D^_&'i9f/;?3sW%M8;IVY[fQ
%Z3-Uh4l3*gU7fM,.5.uDC[ATP/_PnPClk]t@TEf2$&pQ:BN04MO[BoIZ%g,kA`+R0pq1pD6<S:DdGmCTj(%@p7:h0bAK]/HGJP`a
%TLS/aqi9UZKdPP9T>//%IJ7V9%1AKZ;E4\KRT+:&\mr4MT6aP8]oLoOe_mG.K2NFD4'_TkJXL[@SRhfWMaNVdaHl#)5m)Od@K!H9
%#D/&d#2PE/-Y&R$X8_^$/D%Q;K]=>+pf/@7%M7&G'$j6lH'@<iVN,>5/D'bD=*fZg+Wi7UVih0l.;4k_Te^sO8ZPU+Q<#:#lMVhl
%cQ)IQ!qA/hRF&m7E!4>;W]1ZP5[j5!2FhtR;TGsdE;i6;rCFfKLk&U:+Pk+MNPgPB!@Hf^ZrhJ3'JrKdd"'fHfe=!5;?mSB?.]>%
%qlM<UJ>tTg!/Mnem$^ke!@4Kk:4*IKpCB%o<tnVq3_l2MBG(t(O1")+2r@+jP"&G6)?c_,o3`7P?*H5`dEJjnaG3aMXX96i!^r4h
%S.o'@TA:okpsB=33*.tq(:%l'(eDr#<`Jac35ct?TG!$ss(0sUkeT,$$d++,pa!`^(&P03hQJ#Is#)%+MoThsF9j"gentW57t[fo
%n`)!)U*'Q+J?@`<;*nt</QW,iKMWJRO2bps"-YPe6L%-s[Dch3FeC<I>r:p%i^bdj__10`iXHRJ0HOc?)4et(U]Jn`W51(Fd+e(>
%gG-WTT#oqA!O;7l*bVQeZF6RXP-d&hiN'&9_X&C&72O;E.!Um[`ZEuh:gJXSS/;6#c2n=qk@"P8?p>Wp]&F!WY,IM^F^#Su7t(k>
%5k+i8.GPm]-\>psaAq7C3VCf;pRrbHor`Z'(T?hIog\WigR9T_a>Lp'F[#88SHr'[3O5*u#W07U/QM0B+\QIQB+onpoPS,#\/Xf;
%ZQd;*jB*\'(a$2><ogE'<%A%;g,1pTI;IMC0O;:[N4[LIAGi0MaB@^_LW-Ntal'Jr]I.4;P4</%TTfVDOS@fS"8r+eo?$n+]rY>X
%qh]%4<l23ka>JmWVhm6CjIk*O895ho'%9@G[U!1Od=ERpcsnWWJ>S,mn8+*A>#[$\WN^_6#_a2;J0GjkoN2'@7:]ulCDJ6BW$2sk
%f$t=AB;fdL$#]nc7st3_5i<DnM)q5ect&UopDr?,Ca:*iED6T-LkE8Qk<[^"OqrH'_+/nR)1HZ3den`g1JijaB^dlJI[Z#0-N^&"
%DM*REEKsT]j:r:89!9[5B5dhVNKUWYi6nlBiTSWTdM)]NI"FI/"cNQ^I,LS!>.TAJaK5u7`@b!l),Na%E]NQS5di2N0kA_ATSbGQ
%E(.O%WQ=3QLV:%@jS8]k5CF_#M(MtcjL9qaibg4m#K:YBBL!!9('2h8FC:1Ce>0X:20Fp>\$.2'ffX/L+m9ON2PqdI<?4_m=G(qD
%IIL/9Y/lJIAlFKH+EF%+YVhdp8-sG:5U"bA.inm9D?E`Y"e$D;SFOrn#\:0s)'BsFXeLV2YVa)^aJfUC*E=M+*:&XJ:gj!9X:7B/
%U>orVf9UDR;!j[HFPQM=Jr7'7^30ni,gsZ<cWT$kL*t[j\+A;DiXF+gb&J.EZ8UPTi)^b;^3X0AaC.$(Y2eG8Xt<sg:n[Q(aLj*r
%B%7kaD;1TD'<-?J$5Oi>8?9Y,nJh`W0trQ*2iWek%]5#r*[%#%gAj7\GlcmEmJq64WE/'/KcU*,`C0"[5!/UeH0peT]ZIT9/9Z+s
%QGsta7E**VP)?u(ACq7(O!L:RrnXh31obR#OK=r!+H@f"gbJ`Oi@5i%d_.$7PIDnsCZqA6rdd4HX8\\YU(?T^M(Dm5b'ZuWIfWje
%iE&9$50$2_L^Xj]=/JHF]>_rX30M@+djRdbEOF-N";SQknL@<6%=,97(r%Tg&\a2o^#[D<VF\:MX*%kZM=j]ua^DB_7Ftu;,(#9#
%<$l&p?%d5k[fpe&M!_+f`42h'IolF`)$?coI+-"HDqtbGD9<!KYb`(@&9',`/[8kI%Eqc6Lhgug$gDTOQlmAHl)%9RprQ6#*;]/=
%YKjsE(p_<1+ip!N*1>Ub#?M8h+^d_A07Mmd8`_?A%"o<+EN3R>_'G)o[RF:[hHEbOp9_YkM)m$61`W2'iL*IOf!bM;')\c():UN#
%IKC)X!'Wbl@^q$(9mD9.OB"(:\KZpBcamE.m;Sg_*RRD7DHH7Q;u"3@a!<Pm5C\EGB/lmN_`ODFj`!7Y6pD$<!cL)UQZ;gV+?PK@
%$OkpEERTqYBm=5feX/%,I`r7$?$W,?d6U$tkgaZ0EOE^3`TXOP#".$eaUd^IRdKlo4$ol_af6N*;J^?<`tJ:^YJfG&)8E>I(4OV&
%'>)'>qZPh8]#c(D?jb.mS;pVB8Qg33'cIO-Z_MTGM(,[EX'p89#]jVd/uml5-\%k00A2Ka"?<pt+(LV^U$A)V.Nqjp1!#*G"`\.;
%Oig8JP>GL)&c.1HQnnM39EMto-c43h$iXeb=*qL9TAk@6;c+Pt'mLdW0*Yne&NbPrE)S;OJVY\%(JIN3D7M?TY4j0EGQ0\oqQ3uj
%^[T)e.0HA:Z+jHi<bV``;4=r'aalDt6bXB!Z>U;8D^j0I59u6_TD8=O`r_(`aa!3niR8i1;NB*d]L,%k>+UO`E3=[,:RX;4Itf,<
%Q0]O;cX/o=T_6YlFp&2jjGt].bQURMA:ObJq-bR!*o'Komqmul3nZO=%Xs'*W%+ClAuK2G-jP`AG"AOi(YG/R`.P=j!_<ha8B=fl
%m,1`4iVCOY&Dkt%mH7PWN9tYIK6o-HqP^+Gd2qh&08J;DUuXAjRNGgfVf);!7LsDciW2&nK5ioq94Nmt`n:I/'?%(+V/VRFi#<u`
%EC87"Di4).>K#M@;MMG"pp#%'d"]SkAr#9mK3K309Jhs_!)"->oa2=/g%$-"6?kE/[Gd\lL<;09>9*YP?'L]om^0J.6WhIg*=2On
%6g6G?EC==Fois@c.0fEP2p@2nM!+\0h/spu\ui).Z.Q#se_:7lrF:Vr^IttFl4CSFUp14WU7t>#-][c;do99_iT(K`.Kt>GSjc%T
%T>T'7!$\.6`:`Z+OKN5ln4o(T;oB2H3BZ%9?7q$83SgY8=EOI7)G<F10XMj6KagC+NZ/;a*TGqlrlVdu+.>3[q2-!&FAA1>(Yng,
%71P^g5so/$,A\@2a\UZKR=gW8Lta<tOCb=L\k?;i6j+=n2bnTN!KO\Y#ock*#ZmDUY_=W]Znm7PL]Sk?A+Am.ntM&>M#^Gt)]N1(
%rGc9j=N;CBaNYrON?@-M)cu*IN^O.2B@Ose'h%N.e]4"N&:?qV?o@`u0(,D/ms-+AhfU3+6Nu.li4Wi4ZdG)ZD*D7tLBO(j;Gk)5
%B1O.:P.lINR^i+3(BYNmiXbt$0d*>G3JIY+!XR(4).F6cbAl7I,+g\K9gQ%MA'&1*&)C3@$^cu,!eGo__>!-f$"!b&\p+]k5k+V(
%b)"TrnP6.N=1%ef95m.$ETFc4*,nXQdOSQf>S/?b_rq[[B&Hm6ppeSg*(gg5NB5&_a*7J1o%+E@;uB`MkS6"6i^,pBD_9+a;Q1dH
%-b+QK#4g!G`MkQY"NM+5Orr(n2&`O?>M9f*@c0C/0kQo-LNThCg*i6hYD"Jb^4N]dn&u5sYo&'9o5iEpN;O^b/&N*l*5"ja;MYtE
%LWbfeS=M/gSdL/[;E<;ok[6;bA3P]:g2Ep6J;CF2JloO2o1g"[Q_OR<FQs17\VdJEHabh6JlsQFoK+>uE9;^Z>CI8#O#C22]@[D#
%j]E1@gSFoXC$9TY#iXj[h1T7K#\TiNi?4YZ1hG<tJU7u6d5@#m>b(=7(`"k0EN4&lr9,7aTQcBuB2/"X8U`=dJ]cBer8+dbVJhC:
%nF3Dsa8ql.2XnGg$3k!uLT^.u/@A#Ibb;4pGf(Km6JMYtck[UB>aJE9=ta,f[[:>lpCude<E5@D\mS!f+l<*l8VJ*PPFTi3p5-p%
%5e[qn4_9G92*'Ej/+`iW%k7)fN=+NX/(-94]4H>;0c_#X\d4&k*\IE@]#2:eW4:$I3c]j'cki\j2#,a+IPDl2f*[hZ'G%=gkK@_.
%j=4KhFbQ>Pjp@#7+^Eecj-qa4BqPj;9Q+!t@?\8(&VF%8s6?\cIk]9YC+<]IZ4+2oKp)WAW[b$Y!9J`<+c;b+-QL9s0$-F<*.f,`
%1qi73;=TORAkT(_7(b@SMT[s?$s0CZ]sA,ZK:jLi;.:pY\C\c@k'/Z!+uts0>s&YCGNfg(R"B[,&^)D;iYetF<H_[=F2Wk@JsZ&!
%5g"'\WFS9Q9(g%"ql'2=*So0D"UuGi[bGUY&Z^,0a_\5<FD:"lK.eWDIpVjS_$]/j1JI<aKkh#a&q!LM0u40iRXgag36GWHUu4C>
%=7A$0#s(&<`im]]-o<eKeCUrBb_q9]_:IePBX#'up'b>nhEW:u&"ofVrZ"m.*EM0$<=KK@4+1+0]YlUWGfj'+@g-HLZY2b,M0o=2
%DJY+ZBDa*Li<()BAr2G-\6+="63<=72&oP`fU=<:"J,d?=H"aW*4]OMM+7;<@J3_]MKmLYB:Q`2M+)(@g<j[g1a'MlmS?)J!)6`#
%?,R<VU5O:`RLnI:"ArI0S[%Er<j>qZhq7:e3E*/NaNV2l4A]#QRN6g9bDe,9G][JeTQT7@e.sFi7h-<cr,M+l1K)#F7%><PFM9i?
%Z5uOuloUPS";#`9?76":1-,7Fc6nBhVK[urjbe0ZEnmgi;\s^@>j)j7oCE3*/H+/B+i,JZOK=E#&o:PJ3INHZXf.2B0iR;;\7.q-
%X^d/'MZgsPfLP-JX-4cZ\--=eK,K$.ck8IR]de#FO@hW%qaH"IM00-B`E<F)dJ.ktEcN;lKEeH6peF(nkH)`AndF"MLsm7"Cq-cr
%':3Q^Vrj&1#**.gf3Uf=,?_'MiJRs[Da"m@A`EEKWeoc\4],2?P8!q%&T<9%r7j274D7!FDkH_[qca9]p!M2!ocU\jLmEeML!2([
%^oiRe?RVqB9F!:#*bAtE*_!--g##+HYs2I2-A1PB*&f!Hl/i8#llm5e%V#AbB"/U$W#u8/P<pt(c6?=)LTZ2'AT0O51]lh@"9jWp
%>Bm*?#dKKL]>fBbV"/P#GUs<[Y=VD[BZZe$9';n0A0F*lZt3]j1_a2n0J/=\_Y@)l'lA*DYXDJ2Qlsr(M?EFTSQ%8J6T$8;'d6l2
%\g[gJO1=+->[I_kJ7NjETfK*T]L;1>c-TYSAAQ2il4r*j[\O4d$kWhI(&Fuu=Mb-ei?k9.k"<BMgE\6sejW1?@\hAK9j%'=0(-O_
%diAXP`eQN+S2S<Q&=.8!OG#65,tJX:)==Vpi.3ms/#G:rdh&=-1G]1A,O]6pdb)F@$sW,j6*Mbt0!oj[VRTe1qPKg"#kT.3&PV0`
%DsuLgmE2Rgch@M@%sgf\$=r;tnlU%W%0`Ifaf7,kWJQpn/;&tRKUllUhtR%sA'DX<hYTi)[g4G2_?kKsBW\u!R[5bLp%nlrecE>J
%3gSBNXH.;CY0!!r#I'tE.ao6IX9Le=SC$_a9L`:pJ'`5-`Fn*,J3aBQ#I8JA(L<j'!6%Dps/Ek(i#\a=NR/Bs(hH;QacQ%+<Tk#q
%ClC+G?c<9ab`HG#6f+rGOHDLd.tYe&/g@j6emO7[,M.MZJ6!Ll\M:'FS+e6V]$(R[#3kmDou'#>LN.^eUgCGY4C3Y;:a6C5enrej
%MkiNCM(iZ0R-*G-MXY2j((<q]S>BIHWRnB`W&g2[qT7m'+ieCs/LmX:Eb8Da6bs0l&$j_,.C)F&<l<*eMiqrm+hcgJ!U,<MZqAbu
%f3*OFi8\=D;7]$(L"B!H8Vg=LR="gZ?c]j\%D&X%?bkt8\Y2Bi[V`tLO@0Gj/l3[os3R9uZH>%/Dp5MgD!PL:>DHFj9r.B03Rf3B
%ZOO:*OQ(\UbtFm,0P83_kjb8\"C*:e3@B@'an3I,YL^7CE#h6^UhT^l!FWCqbo<'Qq`>>1i6@jsAZ)U],>j+=;;c/Y?uG)*'Z<f\
%US>?KccNK$q0$8O7c4GUAhQ>9aM/*t7dZ#FgE?W[&[(+/U-tjqLlkLj,mgPJ8Ra>Wf*kDsKSe??B5&XtT[MPBN'G#UaUfp:&Q9WV
%=/j*k['<bJdT]?4.*4uRdL[ZMR]^(Y7)%cb(%!=7D=LrZ$qVVO2L?Mm;*Os(?F1%:MlORkpKAM6!?/`]Mfd^>2#0]8Zu<FXc(qCp
%*.ufG\0/m-J\[SaG=+<KMp&>:N^%Xbn+5"5eqF4Da/k[P1AnRn`c^Q3<n)XQ=ZY5,6)3IX+<:*^_=?8;$@s[L8S#$("L?!pA!P0U
%n6oejpZ8T%^elp@3'M^s(GUj*W'H>:CSE57<uibY#"X?Q;H-AO0:8'OQ:#^:!GF&U6!Bo4hXqM0RbRFQ6ulEXCfk\Fc=u#XQmiV&
%W%9'a28\mmJ(Vaa9PACCHtZ++r7]Ro&HNP%2ol3"Ss6j%k_J^G>NBS1Wu1hT+oDE40$Z\*(AW%MhCU%Q.MM1HF6\MD(XI6OH[FrS
%Ju9"&T5j_<S*tcO0AGqZI/)1*rUj`mCh&mqpA@96NW8Kj.h*5Bp;NZ<p;CE62s>YY_M\W/APEhmJ*=IRcVJfTML?+e&jkQ!jZie0
%a8b\=++F(@"b$*L-11UJT5-tZrnd,Cr5YjF4#QDr/pk*>mh]j'J">tp<+IKD]Z;O;#MVO:o1uc:4m_5g,/n(S<nOE"OfQJ7Q*i_]
%fW!pR(I**Zq/^t2DCP9N28/BA8!(+MMs"u?Dbkl!dtNS'fKXTW]jGK#\lI3$[lpd?nb;GHO1%1rSU(@G-C3oDVh9(pM2-rkjX<Xb
%YM"\p0I+$I[n4)og2X%eLXXQi7/kuT[9ZDu>h7<ek:5g9j5RURo\NQ)^Yn@n_e8>.]D^Ti[6:M0jnXtmT).I8g[cM*Ha]qR"+CG3
%>PFK4A][leUNN[KV+BRk3#tadZ##P@cSbpFEOq7l/fFNCrjd[&T=YP3QR38AhAh"SnA]GC=;SYpNT0DN](#V4rbJuMqmA=0"a`B3
%;4H#BWP<AsJ$dH,po$MUPc0,AFFPGK<:7,9h35]jP<qXR!'5mM4c'"Eb60.&([A4<C?+RAcD(9mpY4^c.K'UI]K,oF:`d"dT=[P+
%48f?/(S3kZoQ)tKqmEkFXnMZ_D9m*,r-`p@o@rlF4m8:O<U-9T72cE4-d!p$a7jgZ#A.'D:neJU.$m%)6"?agaB+C2h8S/O-B0+B
%U?IN`4%5[`6ODEA7]9LDSO]KP3dF&$Ug_Ro;FoA7,^omq.(1IMOq^E_RaqP"P;ZE0>Nt9V-Sa,#WjJTR2sD?d5OJp$Lmcfp?,)bc
%pc/FFKsLICnBSW%Y%5ZFk76@^>D]`;r:%G7fWK'#l$W9;MsUk1me8=1op^Nb"00ltPq_AR)&(ru8Z)*A'+4i[&-tVqk]eMiRBf(<
%0P`t>&TA_ClU9b^G6Mn[E7S:ueiT!R`2_89dh!s3+0$PsT<dFQq>crl%%V3tRNt=XN3jE^C]BY(U\baIK*b$"pE]:]JX=X/X\o0\
%MZa+7<A-R:^-W-T$MJooZ\%9VU;!/i[SfG&bdq+?6l35uos3naVZ.:*q2B=&iCZ8sSiDTR+WBHcp7u5^!A)S3lDUO)-Im<&a)Xdf
%%NKcr=n[,m3/.[_I>q%Xjm5/YM==\!D31nJN?21rWoHK:7J'0+5h_k1:2bfm83mFZ>n"ATWW+4pq]UD'NQb5J1n`@jg+mBNniB:]
%T#de9.(Qd$F3m=@Cl%DGrgl6=,6CuZCC&sjZFACf1EkCi:@`s7m90.Y!,\Yd[$XF=o><id_)eXPG[LFhM;q1,*kBXk`_%8!93-_m
%3.b.q9OPam-\oj_9qZ\J<,>Zf[I3<,CE/'+[(>sk"*u]e0C9p38a-:ngS/3[f8rUH03niMP$3L,WG<[C1Q&J]<1o>-8X6D<,[$SX
%9!8l8O4$#2;oX8_WKc=mFQuN92*1H1-Ej<dV_Af(gM^2C3sl5-!KejuJU7$(P%?:kaVO?+Q-m[#;r<cf0;_4F5t39Eof%?N@X(Os
%cJ"Xmf4;s/q"YbjJXHK8KL,V/g'eFFjG+iTh.ZRPN<XRH3oIT7J":t,r)E%n(Rg!qUe=9Cgup%cS^J_hHRl\/d7j46D6m2K8lBKO
%W`.)ZCiS0?Q.?-b9?AK\hFbV%1gl#,V1@5K;8>M_\2;`<7o^QeO]"bK-&?X;I=:1)?P"UrN!OG8crEsi_"A7fQh!39FRo;W`'c%*
%@8VQ)?)@8M7a#IYH<uETmRq]'33]'Eh%s&B!Dds`p7;:#7t%[XWq`Q0n9eoC34cm'U^R9\%YCSOq;RQLUGnn`2+m)oD\Ff6l/t1P
%eKeJFr`?HVUo;6P/6gJ/cYS'j4:<Htl:+Ycs.h,g)jW5N4lGTGV/\@MS!IrHV@&o;QO\CC[`#ifW?+If=0*,U1<O\&C^".d,ZNVC
%$!sB_YZSl'as&_<h'F)1&Tp&Y/K=b\cBDIC)Bc+qkd%4SCjq94#>)ie`<3qWn/JFYkg0OlX!3I$$+Or1m^->7_:9+XI/62&OP<k`
%gK"nYQGWu8:W+bc)R!3;RT'H%"cJM3/$EESl=(u8eie4h/[L_^3-H)Q=[Q[NQZ_Wr-.T[\1SE45U6Zr;lbJOe*[Z`2?^nRj:\A$c
%eh+S[Plg?OC,!+YP!p<?2XT6';No^"V%%SQRU'!RPPX9RKsGP5&8uGNn?Z^3cma$r03]G]9?69)-Zdtift>^?5iVO$\_7+oSAI91
%2`cm_d8:WB:*XPAUB(Vh^":YEf>E64IoT3$<M[_f8Wk>V&iFY'Ze,.7<0h7;Xt1&"gJmmO#:"XhWg+:"8Ybn">$ejF=^+^=G:FY0
%AtaD$q:D8570=1HJR>j2pf4e8L:YWiTq#p[fn`K:%#fIIhEfBRbgFt@@?P\Yn"KN-<DLEShu)uS0uSnn,l';ZKjQs"'S$Em=)0t<
%S[sd,A8,*VE$MCpMIJ:3CfP88kQ4]b7^tpsO"uub;)bMi&P8gb=6hb<F1.h$lDa/]#J@Nn9J=,,$BYeS@J"G9d>&,GQ$#"R*LJo)
%;fSatR9]t9-@Nt;Hg0qB(OeZfdD$@0h#72XqGkMckp%u3'9nD.qc//3b_IjacCA8sI*&LrOnosNWph+aXa7>`F7"@gI'6K-T2hCT
%Em.qmJiYTCp2QlAp4Jo6lfoYb/j!3p3nb8ml=tV4-G9?&cY?-KS[AYhqDG<I3p0qNjHGqTCn6PYR-3rmZ!90+d"Ae.9O[7ULgF9R
%UrHLQ6f:t/O9[)EedkFldOJ+4OpL/O@I!"JcQO6ATE_!:5U<1Zi\gPgH5K$&(%F*I-[&4O3]Ob5do*QR3quIZ?hf?AeT)au)tnDS
%-N/u_5>#K6Tqsq"I3k0SLe*b0k/0E.RD$b8.`MB.M0c/DI,.>YTQ+tE#D`u6X\51._S'0P?7WDbP%:/aR7u`D9&bq;2#^4gA(6@=
%IZI$ZZUkeR%[*dJ=hXY0I%s4H`mP3]>P`bjNt,/s=m&Kd^$g@DWUhIYc^'YeNFs[I;S>Gcnkk0-^];B8Z(=S66Ekk7:`FG<U1i+K
%I&]sKaWrrr+eePZ&G_UANh(1rbQ"gK3%3I&?Tsgae/5ho3RKgSU(R;I8[Fh\=M>#*nZhQ+_eq!2=iKV>iWE:dTZH.?#B^.Uk'tt<
%H_Xh/F1>i)HY>l5cKb)`J'C4n%7EhX^_o;JEQ540:GTYXG-)G?1g1tt-&3d<D<',+L0K;7:DMGBU(<EQZe];b_GD,oEc*m9g\nq2
%bVj3q@h"8]:9dume1M'*N[9608iUu1J2#!:`Km>BJI\;Q\`#gFC<WiL'/`EeM/fjj+g`1A\gi$(C(M/mra-VHK)4RL$_W1uBlr4r
%^9/!B\'XG2+t^b,Sg8j:%qOMfV]idCLDR%KF^,L\"L\N'4!qV_7c8g<=nQZH_^1pkO9<'\'dA9/H;DVq_2j:U>=aLm--5TEFQK#^
%P>;&b8>jDhJ5r9:N3jsT>!\OTTE7SUG(K0sTQp[!"43NJ[neDKF:[pq8t`$g'U^htJMS`[:D"tU.;V6Y)@e#SI=6<<AD".$HSTWZ
%MKbpnb%*3Xqg_;h\k<Ztnc13JpHt%1L9IPr6q:o@U'f5^_)N7A&FHd%M8cAf+^qJW\8?]0KM*I(A"$b71AouqD%C<GN\Im7/r6f5
%)V\X:]ArE]7_EZLg'HsdD]&GY6D@SIp**cYK'eph>YAW=qg#4,M)'o=(`Z8XL'[:T<<M!Er]n>!\bU'?pQ.XM&^NVF6Z?fjS(sm0
%_?.bWKfUR6oQL`;RbZP*KledVDcbNuf(ocjbS6257lG4[!;,/*(iOu"a-Ni-R*M><@F=lp(C$"F5Zph(gOrQL_7Gdj&/-\ja);c4
%W!e7!7h?lLMM^K*gt<fP:lb5`0IN8u$&>1O,n/$`!cL<dh2AKP?`Zh:L[tG2)G6Gf5Tl79lg1#>HFb@&ZuIPbm(bY]VP<HE:`oWn
%-713r#bnpb80*<e][5>+368<0f;naZ6XcsjV$(2")lpSnOFN2;MSL)5%85,L=GS6.q6@Z.0aamjf08SqQ2N1/;l?pZFoM!+TE24/
%\a(jPHg^P+Ke5`QN>P]HP++HL0bB11V]cpGn(pVQV@dO(QO$e4<K$t%6Y?[BKE/0JF)f$C1S#I1!hREYU%+D#&Y%Ujcu\p+-J+'m
%9WdEc'nM^Te\LO&+;VPsak8;a^J*fTN4S-AXm\LEFe9S-#=aYnU:G7<Z;(Po`O!B86G8?FS0h28#ra]h,dri*<[5iQqI[eO5EG16
%_u8*i&Y]i5;++u^:&>X!%mll*,G5s"]jb,FQi*\U;P*R26N*0#'P[Wa5$F*h=Ic*UC.;q?K:OPi%a%Y7+tPu!b\e1`,jL=o@48=4
%&_7$X,CRcmg`U%9<Ed-@ZisnITT$[K4$#<[D2&U\TbO@k=uXTb8<aM3(SpF!0ec0(<UqGr?a&Q8Y-#60*7E=EkXHPZAI#FM$5-i,
%K*=o&L)U5LP>9UHN,U2%KrWgW:f$$/f-)XNf*a@J4$BcBrVD%Ua4A*_8=F#f:7L'Mq"<+>;kHU;Jfn3AM,:;;5kPW/h_e<f8Q&K'
%5PcH#ik5b?'MOm>\kN1qR_CWe+9;dK!DLh`A\e/$mNuHs5!M:\b&/ZlZDF(ZZ!pi-e*phHUE+DIG5."O8CUZ:Yr)jJ9gP`bGb&3W
%WJ$a;Q%3%0_t'c<h$D=4E\&)!OPu"EJ:]RDHai>:q3KK..caPtZ4YatTr<=_j;#E+45me)UYPCq")F]h@EHQ>RX(JFh,rV7[Piut
%)SCDUhX?=V>$V+38la07peQN<IO@@S[Hp*gJ!&[!D/>,DQR\0RW^G6rD@`h5/WO@.Q8#G6BJg(tVD[\`Q9@?Ld0`Jq5/3<^1iT*M
%1TA62d,5Ju^b@ZXK(gr.<q6Zr:*mR2l;OquUqkR^j]udi[Q*OVP],9s"V.qR..C(&B_r<[9,%Z4>TXNWi',;Ih'W7TWs\gFW@W);
%dLCJscpr:>EBR&L;5JrCWY!9Li]D[o1tL*RB9#J6Rn3Y0>!VUn)RWXM2KqfncGF65P9"0AiiTIga=0,$6R,i&KgS$q^_oIJ=RBKO
%R;-/&F7KPCaAE>]?<rD&UCeo/BAYs/0i\F&Ofm-S2/s`8W:lft<,Mikp@e`g[o"/6fg6UNO;R&W#Xm5Z7P_jSdJE'UA#dPcJEgAt
%#EiO!(7eWf,S)d9QSbo8DR+KHiU*Vi0WiDF'%SSmgkG%-A$?mD-,]R;g%'B`msOd5NhL\@keeTq8"'-@RWGl/f0P0Y;/2T'lq4Vl
%S>G6"[*8eDHOs>uHDpElFSH,ZQ,ds1ejYb`jbA>NHT.k0J\$#S+Y:Y'ZujI=:CIW9S1=K<nhpGcM[rKGq<X:+9fMI?duU"Fr[bZu
%$]1Oh3WBN<fTFo`ce9#<2Z/8(Q^qL;Id#q;^/BGein3;e?V[$I3SDH%3G$VIU@a?m'=\-/OUM!ATD**fZS10k@XYrDLM*%D+Oph=
%FP:5a1UtZh2T3%(n]&:2Ibd-caB<Q?(^HaXchV5Ir]3:0YRSo3FLpi2cLs?OTCm!PKHo6LIc#gnP"g1lPq8m=mD]oQEe.9Fa:[Fh
%i(sPb2B-]Ui6$g>N3)h9^i0s0G^=l@PB(^hipOKTd%Q>8()i3:GN<g_=i/0So\NT7`&8s*ge)aHd6,7Oem,R=!S8mOIIeIWig`tG
%5>2.#inYt+0s;3Z]BitSs.]K?ALX3RZkK!Vc-nGc0]=9VOkVr(.DJ7f/;*jq\$*'%)PrtU1(q(2q<eVubW3+Ef<>.rO73,BKC,]U
%W&7t&gI4-@l$'<Fd/WXns8;DB%tFH9e`..+hu2Z75QCN-s84s>:0VQUG5L7HL\L\p*YBKBf>%7FhuEVpoac4QIcc(;+a&$W[qg\r
%q>J7YISpj:I-eWGnAdclqd5ud\]6uCchuGfUj#JXHqJe7;]\/C`t?BgH:Bk7iUhafF8:[)0)OR]Ti=4'mI>QN9h6,\o=t0X?iC%Q
%<VDnRe;^+mfp$@JlEne;*L<oJU!9Af7^8^*5soLLH9<bjN6i5+\%ha8KAm8d2E,dH04[Vf,fc=I*u1I^22'fpSLB7g-<+[>5WTYa
%-nV#aUs@jABQ$mn_U`2/9kmbnd=kY_q=)gg^e6\i!kdR8WMCF5CbK*hc.JeIGah8kJYQV<+e+>=H.[`<Z1XejQH6ZCJ+ZHiCWktq
%3$#2D\.30WiqL@`k;cf3rr.AVrYc=!&]>$J4uIhVLFWN_]ftRp"bKOgFPkm,qC7A&>eJn=b!?bs^_J8mX&=o;-_#bY_f;@Q,u&0(
%f^]D!-j9\,H??<agY[E"ebV/D$EEARHrOj^ERQY<+sPr9I`GTZZAs='6L*]IS)g4PNCj2!`*)bNJ+m#/<jSj1_G,hu)9F=`.CUgb
%S[P8P&JK0JVf;c7.i1Fe<A+.9TqD8JU\*\ObZGQ%/!4Q$?Di\;l@bLH)DRq#Cf>D\X#-A/2H;66I:X/WE8EbMX']FW51RbsjU40s
%[r"*Vb5P=5'n!fYW[Ag$_7#Y#3_RQl<1m<Tdl@)ETnhdUD`paW;k60YhjP3Kf.JQ#C3\^sP>)`F!*bsFE!(4mL%>(/kY5?kaaD4\
%-6q]n_Z9agS?@uL6fC?b'qERUWr<YhOtDG@BekS886^MiKk%(:@>V:9.hNM+`.k$M>%:CR-^o!(>j9M:9,C)K\:mn;o'K&!JEfBU
%[8p>gM);Tugu5Nd:g#%=`os.q@=]>=?PT<!KG5>gZ[Zn2dl:Q%<>IPTmq<t^enpgr#qnteXVRgbXYd6I7QhlG`'erp&RUcg2q7uS
%CAC<]WMHhGHI`Q>$hLSYMQ4b*:]=bJaHhIVM_17-R5_`=Z;QKhCt"t8OsMI"F,hj><`MiVeZe-NEd(",R$Q_+d?[Y"E\j%GX6Kh_
%?<Td=$.^@%a@'#[r!tf$?@eaWNT,>VR7j[76Ok;j"?t[I#ag`B6Z7S_EaFT]O'WlG./P/6WVBmn$h[EF8r-3iC3#0Ym*UBIXX"!_
%(Om1f;P74j]]Z5P'G^b5C!QIGfjWbuKDDGgTI.9g-E2&)9\;oIm.C$:,A6'&[V8^0o_&>l#F]EW[V53uSVsbHg0PhI0+5Q]4'jPK
%G!,_N;@R,oS3Y>@801ujYW#8)jK3-HfoSP+kH`):^WWEo/#ogt5quYU>:YbXQ:CnG8F:t7W6;F]hRf($5\Eu`Lo0WSMHR#gJpZI$
%79$1b9406>p3B^AG5&N\M_^B:lMVotUVGHMM.co3K$)*F2sF2Q(7u-0E7tX<IP]I(i[E*o.dg!4c`P!pms*Bn<?Gr3E;s=L5'>$_
%Qr<:g9&hbke6hf&Btn,ODTdO7cJ]Qdn8\A1>dP2VH1Si7r<d03e`QQpK=]U=ofeR+K+]B5kK;>Log=Vkk'DqjEJp41>r'%;Zf=PQ
%Zq@MRdQ';s`U7[geN[>cKMr@]l9EpP.bZ@DWD7s$jQ$:jC2PXN?&(u"R6@n(3E$A)qO7`8fCrlfj=);rd*$+F6!0E7/)abrE4Fc<
%r,DVo+ntjM64Z53V;0E=Ma@;_\8%G=FjQQhUOKY_Nt&@(HVenq*%bMuZPZXND02UV:XQk1jU'RM(K"%E''Bl^g!g^[VD^?Q'7+<>
%N&Q[!8#P<M0/P+r?;arGgug(&+/NnAX6/pPQrAp,r78<B*J?YVM_o2_TC\X;@_[fA0Nt=4m:cFVQXqa$,[NnE:9^6Em,"Q(RW4E5
%$Gq3Y'OZuc8DUCAJ:Y%q9ROXskfK$Zgl&KX:"hT"X,.]=&s,#hR6=2B7V_qi]!,f,MPkQkRV5MNC8+[&c])*n-A<I7CF)C_%Eo-8
%P4>Xj98WGWK@/*T%\+1jEm.u:/ul"6-A)$=^+<E:.7//OC/f5Z;44]cLdESOU^=<O^[UmF-<.=00s7jjCXM8A4Ju6Mcp.3?SCEp*
%9Ff5f"o>@he\*.Pc]SDKr.Z8Y@=i5FVebsh#o'+B=mi0N#MBTmm++pcEd!hgI[rL(6,"(_:`=.Jk4H(f(=eeC`Ud6\()?p;<&HJs
%?Cfj;;;m!=C.=ZXBSa1[7-[,(>X)=Q@T"%T;Xf3Ag?I%on"g1q98bq?f%Y#cnr:3\9=E7DX4J7o?m%eF6i,aLOc4ELjt@N5]GdM8
%I*JI!U_593peshLc#3S6<<SFX>q4D*-)gm<25/B'IP>J:M*3@<JdI%C?a&E=:;dK:ebqM^/4K"kQ!kea=(\Fa2N61PD:R!Uc]KZZ
%-3;sJ$I'OZX'i=Xj\=aW?5#qt5fbQTF#V>`\Fd@T3!^F19ksLe>scD`!?OiU,eS,di2>CkbkhXclUuf3"Q88m_"7H_lE19,)mrWG
%hNRVlpBTY4_SL6#=t2#ijbRb^=8O2M_5(LNm5r-["IFdL#1Od&JS;,fZ!+>+i)-3!,o#2E^HU.R\_lH@c!I2gT62nJclp$"bpL7o
%gF#tQ:RjtO<=9+3,PZCEJI:-7G?tb'/L3rWacRYt9FrpH(Q"gs`+H>\&E,D%IG/^fcq*/M`!"eEMY1/a_g;mo3g8F+e`Lcf'Y_6Y
%k,449@no8j!m0H+4Z([m-Q:F0=2BFn.Ol-Np!PVR:]dS=L-rQ6D0Ab5WW!O;IW!Fcc'Fop^ELuJ,]"Xm<p-T&jHSZ,m'Eb.T4?)r
%KeE(hp$ZBh;:Ahq0'Pns:#<`8oE^+KkUJh9WNAl=.7lp)eC%RnhF\+`7/V!IE8NEaGm4g)_K+)HKrAM.nqp5:cu/9n(e8UAS&@Ce
%S<<t6NH(]dNbZV#PQhR+L=r#O!.$qqe[7&-ZSj%`0og-]-dO_7Sq-\QH]LJ6mF$Hc#GMG_eH7ZCi'+$a0`\=AQ,`25?3(`D=^:3:
%ERG0?(pX0W`aK%L2mNr`4Wg0B_dd:UGUY+UouJ\"CJ9YN$2Z\!YV0;YI2MTk,+UXuF3uYjU.+7bYWa?5<-pC%QiUm)J<'HVUl2+K
%B+V9bp_dN6#`.#g<X6=qL=R9a&PdIYgXg$IM4;h@&M1hXOWurbJ-"J9`&hr!&@=VD,J])I1L\W+Nbf9C0!)u%Q;"A%#$.5\en*.K
%5m/]-=?VP(XB!L'VWK?(!1MPcZ<ZDf&kj23eI6^^&Bdmk.l0s>"J]\U7[BXCqeoT$H*Sn*IF/N@LP#SHCqc`tRUi2p+j$OVC<R9Y
%&e5MWa?N:jdGDkl9/J4\90a7t0^S4f_Nm*RXV`\Jgl1B:r8,?Xp-o0;W0Q!6=B\YCaf$ddmAnKtG5]JD1q]@#qo;Can,6!'m4>8\
%E"P(r)57U!N1cZi4,WVj%X:_Ml;<=91&A;ZRD`Yhe+'4*#"ZQ,]^m(2G_gS!PJ]fq0UY,],gas6>FTV'dG*p"*rRZGlgj]5gt%X:
%h[k&pD&T\JgST'LZ9/ZTB>#;a`JV"nRTLWBO6REanqr.]&?81OoSV?`cIM$T^]&NYd_P!^fB0c"FXfqL_)H7H'296[b>=j*n8S5A
%a/k#N9uj6@Xt$fKBt<W-H(T:R/\Q&FD7'e2IN?]ViStVjZ-@(Wo9.eEkFFDN,84(XL?):SWmp"#NVZm&FroHAHQK%Df@%ARc#7O?
%DqeXfeIOi,Q&VWL5)QTYKU2J2l)0$mrbN/8L\G:[C0Fio-jP)"r;s[Kfc[_HDtWMUI"N)Wh+rF%D]>"(/]i%s%GdIr)fRT$W@K*A
%]B97s0Nh*nD-C_SJHq&T"p\W$AZ=j^Id&oraI4&W,P@lnn;7@5W.o#&hjY.(q&Fc/[f>R6Pp.;43PM5UX39g5?3b7M*)I=@#mbmU
%%!O\If$X&NH\oHe2Vnb0Jo1Xm=VrJ8Gc-%hiKt$N\!q1,k+\p>5,W`()4rDu7dudtg,I!r("j7uR4uR)ItCa&;K<E?_3s^CbjY.W
%Cj@<d$!cU"^kT-S\98O`CdZ"?:KRIa#8=#t&JT+t#hJu+Df/qMBr)!Z*u(_Fd;DlbOu=XN5B7tT3%1pF`V><XbBn\#hM]Q]Ma_c,
%Ie!6?qpH\'P!LaeKsnYL%_CTsV%bSt1?ASqPUN_jA42h1H6,Iu[YC4nr_??,1nj0l5FCpWO^s/8G]KMo#*E@d9,,USiWg!TEToQ3
%`VhtQ^&/XRe_WFXH-]hS0-=tg;mIPM%Z,)j01T_(l`g#7l;<=p-CIW;K)t2+6lPC6):f>HG:&lts$RbrphIeD0+pb=-5-@%danJB
%fFK#Ej3i/FMYhg,H@0MTf[`(U^up-bZ%fri.V^!!*1Qgu+V^3XQ<_YY72*.m"e>HeEbA"K$RG-ceOU?Pi#jOBo4qLljYN'"j2&Qt
%2,$fW<GCR+[u!>gKt^4RgUQnNc?P&V]t+*M(Q@s+c[p0W265b=SP!qM2:tPN6_\c:03h!Enu66.bq*J8qb(WZDbR&G\O:iT4j!r,
%?X[[b@3.q,G=XNJf;-ohPi4]++pC"7IK.H48qbg3]mtsm(*JXHNmsmUaAt`n9YlEKX_BFt'&e3L@Np>L^+<E3<t\@6(LYj/p<k`9
%JPSEb;EoDj8gO&F@QC`&U0>"(>6U@h`SSS19KYUS;-Re$@pD)(S?QJFOKS(r.Ir&Q6Vc''\km?JNBe2/^cVpD=U?D:7tlM/8Wsa"
%Sk%ogimd6M?Xo7h0-&nWO(?"-`u:d=*9[7tkhF)HnR[95(FfIp=;A4tWC#%FGA1'q+Vo]e.3M]kgqNh-$'-iK=NCTs]Fkr_rWj_,
%E_7TdP!T1c%pFWKc??^t@cnLBX0"Xe`c+LjZC@UH5XmLnlafuO!OjYC?iZ)_+E1%IksCP#;3=7+;C3TI+d!djLaWJW]sK(fdLE*a
%4bEqNHU^nVV+HoKjWW:WfllP\<$G0U8OQ:in,:+>XdGO+<S)quCUFg*!UO[6Q%3[sFuVN;WMG,XPEZ?`7,=FBi9#&,55Ks?qFXAZ
%[N;`(0E<sV8PA<4J_%)Ur*jh"p49H!F1&Ou3[tRdB\:b#Nesi/YMFks!"Y56D.+1;^%f")[J'I"j@f6bXTlN>Zj*tEJga7(A3'ii
%jKXt#Ie.UWaL>+fLd3;g#kPC"KBU#5T3e]R9GDG's#C.C.*+U<*lR-/#u4L:[d*cJ(g%*`=LX!I[&mU]r6;\eh:\ib.npP2nE06Y
%]t!W7.6\sfF7;7k&+>:=69uqE@sKqX1>s9:k[&H^4=:G.N+;)HZ#!WA[G"J-+C>@+c'G[5UssnQ7bV6G]+bkT29GJiT>Ga>mFJ/=
%Ko"H%b,FGqlD^.DrN:Q@JU*e'7P<W5"RnPfEOohdRAM)3_IRCg.&$#XW@*JQ\g7^!U$JBEl@Fp=G_LTG!CQ.S;nSbX&TORPf'+/,
%a00*eodjhClQ-o'kGNTs29?!eKSHM*H"mi"c$6X@OD<d<U!%,4;_R/ePC379P1#R9qpdI4I>=`^,%"LA4n+c0?MFgjM*-2[l;B^D
%iq1TW^uOaMbO)!c]6i=XIUXu.T'O$;<mnB'BZ_1/W08?>;;WqK]8%3bbniSr-2"d@g=?5:&nlk`L$G2$QjH^Nr[8He5W3`HZ]N=&
%%?HqD$%<5]pHYGeo&X#MRA*/T+oa.E9ED%Fj$C9%Ft,B4kn-F:^Bj(tZZNtR]8&T23SV>>[Ik6!i2pdg#<'EhHrt4-%M%lXZk^IN
%+,1M+@0Qg2jgZ-Vc4WU3F.T1TbI"ORSC#AG_bc^\%%X&UDk?6KV3QVENNQ3%RDo?/&bPrdZjAUi!l`[`dUERW&AMi:A:ZUV/IN8O
%o1.;l`Z_>ie%tU_V5ub%kk]bY;_(408TN/23QdnmoL9Sgg$Zfm<S^I487?;o6jKdh`C=/58:,*9l+ZLs-!ouqFj:CG[T*[1]hsCr
%$kH!!L5=16]>XXs;&nWg[A6hu6:jQtH6lGtn`!Sh?dsuA("SiQ-Ep:pnsG*IbU[o$5'1$]1IQLG'bh9t<D,q:W_uI/rfO-[L!K%%
%S,jr\4.#3J<"4NQ@:(B6(T(YmH\F,=#k69Q(O-?X?DQf"2A&8R"kj3h<tiDe-I?BmV.QPt"(g#Rf'8tE($u<UYJhda+G1eCHnb\g
%AM;iOFr<uf7*fkIE`H@YqFBbgpgXSjQB,#L\-=EZPM9qR,41/AMO9msTV):RE@=lUc3n1KN+4UUZ$_OYTW]`"$rb;.bK27u[lSrH
%BJ5:<q!c7Vb$\P4lF=ELXZ\P<]!Sbsa>?:$br)D&b1!As8<J(:B@NcLd"ne!oseZnQb@I:cU$;nc&4'AUG8.3e+Q`,^T/p<\#HBM
%fT6[T$/,cN7EA?$Z.Y:tU=cjoSgk:l3,rG@Z%b6FWJIo^#Lj>lqKl.=7HkLXn_'_^Afhh8lWV%dg$6:4hCd48SmdP>+AaXM&F**M
%h!_")%H&jdG:A1ib;)@48F>Om8j?QQ1MS#DV:5@kc;2$"U%_=ec?q4&3CSo++^o?hbQ%Ik^O5hN^KhB.lf$d74p912op;<=J,&LR
%!U"/&31jL;T7F`i^DYQlO2@:E'HN7PQrDIPr=nt`=2r(%Su7LUVcNJsG/`7_DB5,6K3:N@+ki,(>j$GrWlk:tY#*q(\CS]U-U'(E
%.J3($ogq4)Rthc+KM$[0DZ<^%M`pa#qM)8ok_b7ZQ2QJ>WXfh.^!qjTo[i_&:uqUg%A<>'a^[F2?>[u335IjW6b,6i!JaHL<is>k
%on8;JYLed9DB<briXR-3C6+,iQ29kQ5403sf)k2H!'SBM<SMH)*aR;Nb%X%.\#og@2c6lm@i4Jj["QTuAeMMF-"9&R4q;G,<[(k2
%/MF5PVt8OJY[UjrmHpg"(-mIj:L&A-cOXd`@_XNq@l"h8Pe(b#1lr#Q/-kDEPGTcCKe4%X:R4)sRZY'cMTUbCjkiTn>YF,V`Vg@@
%HMeTRgUQJGjdWmSK1Tk1/i_[)O9#+OO:0J#*H.brY,,Y.idSriLtcqI>5fph)=pdQr6f\5MI#f]>#%jVY.lQ4F=iLJ7,-s/53Z!1
%2Eh!B?Z&+lr`T%WK9;f*S?jLFr@=lD7p/`_3gWVs$!^Y33LTI5VCec[*uIjsGZ':sA]/6e`f9VC`CY,NN,D:Bc8L@je.a9H(F"/C
%C>W0O/OaG:_5l;cFjtn-lG)iI;L3X'&IF0BcS'D3k$Kd'-u-nS7%a3X:u'Q9ePGVe?X5AU>P<?70[pp(=r[,hlFMA'gu:q1"+g5!
%&QX;9n"l[4M]fW/3MQ)+?A"+KHAokB(3^GCocI5L:O6.$&laVYi2*5)DMLdkrGC$bB!?EDLm2Eb=B6#*/U=HX]7GGIn=p>e*$c,k
%g+5Me&Z-`Ui_Y0=[hadsFIcDgV)M@np,\`BZdY5:_G8YU_!?j3bFLoo<KSV=;LVJSqBBcSSddRWpBNqM_ncTWD(8n)b]p7uoLloW
%[;^V"c24=('SlJ?UfkbL-Rkc<(+JS9Rq7EhBL^kF-d^cFgm`8arSBg-'9O1K]_f+k]qZ<\#^$hFrSXXu1k7!:#D\p$+NU9Uo9mE%
%&7UZMNO(W:8:+6!/Zh?T/aC2\"I-.1;fS?5#UIedCBV9*$RDlO!a/YTlh.P\Co[he]jDhd8r?n#"-$MHhl,NEC)+h#Y,+WV`R0mC
%[$O1#&d6Gdj:Tt=[nA2r._75@4X/:F>Lth+nlli6,0@5>]9S9+kgBSr7IEFuff3Q#nrdl"7G1l0Ko8fAleZ$Rcq5faIm&L9pbKqO
%1ORHr+A]%LX*oG[JQ`,D'Gr3JO/cR=CfLK1&fmIOGH8#W*fI^='HY3(G6VM.)CHFLf&f8/5fY_#,qFS@,!KX.]YFXM+@?g.]tJYI
%^4-h%?rPR/lB_1QNb@7?X_S/#XlD$AOGfr`[0L"PTmD+P>9JN.+H[[mj-u+p(X75udOQ&,8')7c=P3<hR7S%aeV:8Lc.`#Z0cba%
%_=.0HAo2VFF<DFO+A<,ua+f;fLAq(&YOg^!j04gP/K5g=FV^604An%]qZ#,6^h,C`BXli\.=U!JgN:s218m&7DJsD8h?mZFddAr(
%Bbq*Ege+9B#fk>@<Fqp8,B#/hY'o[APdc9/DNRo0]'&,D6CPJZiD9QZPQjL?P78YB6C-b()T(ul\P<i>o[7)VMq/Q"6u/L..*c7J
%CGpg*d*ehb3C="4jX2;sW=/<LlO4]KGNMdV'C>4J3ZY3]q0;hR!(C>Fmq(NrL>W:g2h=a;Fr"'cdh[D`_6k/A6FCVKhpuX*<:aMq
%5R^[oq2=OS](]>rFkSj3CGFB`#u)ua8qUcU8DX'cP7RS)f8Zdt46W=(k\XT25tc\80N1M[C3BjXC!a33"GeI''jf/-;qD)5L7mB.
%`)P;r.3)ncTurTBfocpKXNJ>o&'VV&R+eFE[l-+<goT#goS+A)f6\)T?5\_\mBrm5bGs)D!0a?$f)a:aWIb"U14eIo8BB;o;A+.k
%dd/>]2G-S0Ysg>F;t?DDS^kNU?)/&H#j]"3Yg;`K76RXi(FU@+C@_QYOgVU$iE(a)ELQTapU"#HHFAtp9tR*nkR@tA5oj:GBS<U&
%8ml?f29/P^D!8"N7:d9@%Dut("8q=`[(NUcW_EO0DoqM73.7Ru3`"2Zd@&6.aK'-FVOWT+s"apPG,dI:AJUIB>t%YhGVVNIV#F/a
%Qs?GQ8\_YM^O6]sFRffNO\i#KK25P>>B$*o`,aP.9:1a?4f;%mlo>06W4Y5R14jZlfF#?*=t@04"2]oOSX/pp=t@N[Q$8NB:'WX!
%m^)@6L.>.?HRs>KRYI-e[@$5S('#PQ3o!P!Ri8nE5tRq#9-lZgar^B5.C,3Qhu#FQN/k++UQL,s]si'-$N3X8/.BN0k_VN>!`MGg
%?T5h/d!lMp#'6\H[L!^M(cQJR9BdC,"o\<8T!qM'GP]Yclfgq2IsXbGXba)[CiI$#d/(BA[g=TrWT)?Lmk.Qt)?V+?JUf1HLQ(G$
%X^_5<*Rn'h<a=1!2\OOMqa()(Uqsi"\sMrf'3YZ1Lt7E(4KEaDlMcDm&.8'A$h25uZt^Y98W20U`J$.Cd?PFR"@i#l7M%eCek'_a
%l@N7;'$WB0>?3&(18$]cTORe!qsW$n"@Kdsm@N<%=M#k<!Le$N`tPU4VgT(^9mh=DG6`Cq/D"Rg`jIK[^m*\%00@XK7WT]<FFrVn
%PGTA)*E0KXM0b%C%0]?<WJL=R:JA@cPC[kXg42Q#l\I;TjF`7mKnl`mGe/uk5""KS?r*j?aQu<EX:V8YackC#QEjD\Rm@fFH9q51
%$()ns+5j/Xi(,@#s8Je,FcTS#%&hIYZ)qRf`D/Lp-D22j$EciX/&aMR"/<A$.5i3&Ld5?:e@_SX%.Sf0FM/XH%as!FqHOIEGZGAu
%"*?<sV4EQeCgl<C6*`DChjWbAa\B;&_aSg8m`^sOrT+6a*N-B79h1OcDJ$!$DNm86V&M$.dPVCB$5:4/Qf_6J[PW/EY$ZO"7@`V4
%^2l_ZA2?b(IA^apj'!kh\rJ5%FaZib6[>DQPOUY+3gj;Bc1X4@QR&:q+Ze%OXemcuc,iJddP<55+!,+mi1aE'6$-bo[@!ssG271B
%l1Da<B.lSMJ$e6kQ8b=Inc"&Oi)(:b[N#BH^YmZ]o*FbKi=.ehA:_-tnF_W%E,LXIh(.]R$iJh4'0R8;7A3Dg]m8PX+$Wg]n5`u1
%p#)I1,jYh)7g$E(=Q6Ohs*H],W]@t!/?p^Y'>&8GXJ6a[m%]P[T41`O3$!(*;&XM%p`fk$qKJF'etYkOS]D=(qU[WK6KjuK8h*Am
%)EZ6Wm#*Fa(R@q+1)1)1`Z@5:,A]4ar3`9G8M_JE<Z&!eheb9/;_?AsY!KdIoG>PcKGaPE1Nk"[\2F2R5dn23W+2pZ,??ZP,c6#/
%\bCV8AD=Eli`(:t&<.Y@5WP2eMrJCk2KfC;A>_>b7&h;Qo[b1s(LsW<<Ol3gYo=2:]h)-W&o*aWM?X)P5S4tl7);W&0HF?hBHO*f
%G2:`UoI"U`Rns]s"Pmg8?P3"8*OH%8`AkDo>+fk7'4IB$=DT[Nd`o%Q@`@1Yd4r*=,>_8(0mpP^?-s9F*Dj!p[7;T->XTK;TcF#7
%o!]:$T:T4EH$(+)88O('eYRqi=XA1qB6>HUP&W_H8u0q&MN:;\'_%eA'"Eh,i,otb5EUfMY_`87egt@9'Ei:O)E>S3C3%Cel++3K
%]Q&VYpUqlD-T9Uuf:0^Z\\;5]cO\"/_@it9U8@0%>.4BWIdI2t?b0@6<+`L_]gN5f^%5]i$AUecQRISmmak+=3kY2qM9<d'(Md!H
%Ja$p/ifBCNYt1@H1EI@3&3&&1,&IOHG?gpQ-B`PW8-t(==$Eh9##iL[,/p!grO>Hgd8[;N.:X@g`@<1a0J4+i8Aoj!cAND%^H=+a
%.@%:;K_Io-e7HYc79YNreVcj'AUM*h82n`OCG&N3KSCkI'"%*$-4J_)DD&oP0d]G1CB,'27*W<!JnJ<WXjqGBCC'?#M(D=.bh5[%
%1=\Oo]baI;NPfe,">lCRR!Y7c(.@HjpO]E:K#9d.-Y[Ra@ALRXQd%En1gN6GfY$Yn#"gE&>?j"6/sX)Y:bpGH8t0$D=I5q]D(jZG
%<u@R'^l+'#;NiN,]U*-/Vsb)W=(+bNoW$"=h+',37hSA6AZN_uo=igD=_cZ,fe<!n;=:*8&'4._3+gifVL"\7VG/6Bgmr*TH<%Vb
%;tC`]HAMtG=sMZD>,S"o!AF<cm-k)E_Zuuk`3E\g#4\BG7gY2;G1QK?.//2W^k2_U\f\$+5pa0`]Tf>D%cDatroQN-%mJm^?h"$=
%LO?6B$#=@ZN+Mm7d2MmbMf0cBM8/JuV.Z.Prlgp+`/OPjLA"`k-$At(6D8n!p8'-q_oo&uT2s(13r8LEMQ9\3m:Z1B73u#3R8!L*
%B@L!u$O%,#,aE-sgT/N?=D+p=G=r\/*&@>rL%2r#VU][(2Z$)MQ2:JX3^"YhU$=JiTAX;uN!D\D3f-\:OP%O$P\-j%U1d_*5Bd\7
%F*6qS$:6m1YOg'H4#e6&lOkZ>e*EPW4+G0IXkSnbH<K\)5(*.S^]!h:$6B%`Hi@GVq%$gc.]mN8n#*?P=""h$\K8?Oifs5^FiW#S
%*kYr(I%P5A5@+*2J,8\br9]93rcYsF68+rqj)_')a5?dMTDs0/CSugNFP4RPeh=Tp&#GPpYXOW=?-/@YPI?R6;FI@"MPCO&l_Q"n
%Dn33$\!4O(.;!66V+JX+LPJ.=4mL#SF-1CUd`%Pu^(C-FR<W,Ka*&U,TAKok/u;T-Gke[[ai*4L?0%kf."Z_)?!*V7qs\YCU=40:
%UpI3a6BhYr/$+'^OUsrKNS,Mj2k32$m6V.!KdLp@\YJBdgp<5dB\GQB>kJYc?K\ur?5NDkGMu:</gUDD/q342\fBlbc.:AnV5\DP
%ZW:\ETat;ABL,Wp_\UI!lHADI[Igi_B'@jInnRuL$f4Pr7cnu8B,Uem'cS1L)*o=/UK;GsCtI]pld;7`5NCtRFPor1^[c"uR3/Ql
%duPP<roE[Q7t9[d;nb=Mh]80S%aD37Tcmsh[f5^B4O%+46pBaYjj>'DgBHiXH$[esb#suN4W:9YZRPh$Kh;>M3(O;%_4s"][hj)a
%\a?C:%Z7S_F+1fNg#3nDDr#m/YJHuZ?tk,bB`<QF)QiaN31`5N\?DTb3nTJbfZn=qRY?#13dEOel+s.*OIA[\GfY&-%W?FXBP?09
%O2^q30)4LJn7W;pK;Eu>2&G?CCYM]H4SI^\1_Kou@\5=?#1%_q\YJB\g^C*l+A5[L\F=1#._)ZFRKe(Pb?#KL6`E9Kgf\`HmZq`,
%Uks-T_P9,=n%kcMNFSgnO/<S_:[.Xq#LVWmDs?t/.)*uT*'Kb`KHuf&$]jEm4a8e";I=@LRcWR5I:2lbe>%;s2G?ALmJGWlHD>hb
%0$?R<D4D6#4+IR.e8.DgU.?6e[Llq\UdVjVqj:2p"CK<\dS^'@U]p!ReA7,1$#Pq(dikqL3+9lPX=kW/"G+&gUfNHsq[r-NV:a9C
%\JkrMWJrM[^FkPCA;^./`Kiu%.G<N$:-Zu=KlPS7H.O6P5)2;0UC+rV+NXnDeH.PPg.9\AD'l:c/JN/GN?7SkP]B$jZSmI1RoD(k
%\2P=cFb=JMP27nY'N''B\<G%)MZlJ=1pOpQ[_@no/IFD"@4s-^*0'[YB&]E5AGYn>QpT=Wda[p<h\*tA`9?JM6)luYU?W@/,!B%>
%252QI;adr2&2=9U%8=:\\-pWIP+pZ>'^8'6%De"''e9KJlsgIDP2[3^KJZgJ$>@f;!4WRa08ek;=`d9,D:Lu.=cHg!I<RDC-3l&Q
%N@koT7$Ltj3Hh0@ergZ^E1pZD"jtOq;POmOj$QZo\.%WUd_1?J5r*.#pC![eo>HR[_^$Oc&!9o>@YYl67?CF$UH'9)\Zr9\rJJVE
%!aVc8NV.acl;CgOC67F>/o^$H6hGdQC32k[W7m(e,dl_K\i-:>)OY8?"C3Q'dMV1a1e&.4EU5OG8Zts90<"7ZXIJCdOo!<O&8f_M
%0WYL1W'DJg\J_?.<9Y+W\P4q4Fn<+#YqRD&nUX*Up)7d@+\PeTFAZl*gk@R%B733]_j$GMCGet`9t/gffRcuJGs&@cZu.kdPjF4W
%-:3l*,T7O1=@QV2m)dB)S4[Fe73JO^5`/b1]JKgcTRl'U$9A'n#[NB3S`Nrfh!6HG03Y$lYib+;nR4"md'MBh6a'M]l_Z-O5hT1f
%Q"X6V,.CBf:M6(]_5WP#-'a4..I,?mm[>Tf#<)P()WfOf[*"`@G$@tEh""cnRSdW>'m)'l)1`F`diY'H-c-Mm(;h?C;06`V7*A"'
%a>3UfXg:R[-(8euokDt/Dp?5b7]Ae^Mu4o*+BkK.*)@$/nhsF<6>;TNQpOGF+Bih]1%I'<V-2;/WqiRL&CHq]IL`B3l4Q-!mYo:^
%LC$9b=\&bI1%o*M5=kqEO<gPUGjcnkBGnKhJC:Okh<m[X7ID@(]c!a"lD8jPfkeKudkS#$..9l6e.*`Q?0d:J$mR+IiEIa"<o4Bc
%#R85<.G6$oVA*AmNOfN((.XBAD[d@gBd,"R)*&;_\1VJ0bQQ(uE,=]RS^++;eSHd6Su8K@EOl_4"[j7!1&[UZ=X=\[!2<_hEt#$O
%hQnm`=qg^IT=*=?$qZB@Au*/[q#l8Dfg^XF/66Ne(CZ!*_7JY0R;+OB(FD#)8P3Y5jHpf4]I_:(fu/Q:fcu--^nI)DeYYl1U8$TZ
%='DRB%0S1".4)Ck.V@$BP"@-h^@@sfQfR:Qd]GN(kf91^\QmWoNm=%Rm?o-.l%`*3b=JrLFP%)AqisTe1>b2J8?Xn9YLJR@]<p5g
%5SY"eik8!KWeRts;)?LS+A925.'#WHOi(tuE6Q-O*-Kn=Uh#JKij'-V8l7sh0NYRO2WBW3]>@N_[uha/+ZFP0]>Ghi%sV*U$<5g%
%;`;`#E'i"_9S.YZ8Z?E<HJr&g9ha3bgr,mleSLC?@hQq7?EYQbS.!m(C->fS.b2,Vj9)A.&8?n&9c#^Q)pEmXZa$",.S3$2K3fGI
%6+e_Si\;^R%i/(hYM>n]5f-"`YALH;1+o\W#EYb\LllPoq!MnD$e,-Fj2YLc>*B5@2g[escrHE.hcLZGiXuE]eEdr5T9ZO>*Y+->
%[g#tp(TZV33Ba:cp>FWRA^;jG<2[^(egWQ^9!Q%*0a1Q#8up]29M7\IA.E.Ih9Qsn"YEWrWa0?lbJ.>;;DIdPCnQY9C\mH&f!O>H
%$p+-0_k\.[XZ,(KNm&b2-*#ddl[W]Z*=C>oa)r.ug'3*mR+8.jBWoq>>9`Zs6D:5eCn-.rP"V:cpdh+!bqN5DOhj]Y4,+C7ed=t9
%n9A&t[6_WZ3RQVS?arMS0BtR,I;9FA.'JsA4L?*\!i4a!3ljAnbg4b>c<k/q,s!NF)plDs\hu;o7jfE5[993qekq2a'(j;LleU?!
%b[?f.VB/kSE?^p=4Z4IUAa.gS&;l/\qUUfh3a"`S8f=LV\Mdf<'Z1S0O/6#k^0&fQQm_=QZa<`E<B\)&.^Q;1O,UW5aId35d,T7I
%2UCp&cB@cT)mB>8ioSm4`TP)SAE*^*St'_<!Sr(upRh*Mf+_7'&Q*O(]'rL-,J7IM[B8G7cUR9bGZka"DSk2<@4EcA11DYLO;&GF
%,Dk"2U4&H!>pet_,[H=tbLA)%AGV;)l!l4p=P^m)UFJSsK9WeE<a7p*4rEGWen4,(oQ:+bd*nQ1j6V-eWbIF.Bu[1XA!G7F6oB=R
%A9Gho950t)HX[@acTNWJ;1f4;k!=$#\&sQb1+aqpqNd%d!AH$QZU+:iLsE1*i)03bc3P6gO/OLL=&m.ni+i&$_)Zu#Ybm"26HrrD
%kOfJ_N:LtGdq:T:.#I<S"qW/-9E7u@lG<aj*24;c@A]$kkZ5d!FXX2p[)F'*#hI2'V=.*HP&`Qe>3%m@*Ai@`:*SD(m:Cn>pdo5*
%Em]t[kBU,j+_lfOgBWK%p#h]R)K93GZCZ#OXJi1)+HTaM)D&+Il?c_q'2l)6\Q[5Um5e)W_+3!N0"MIQU2HLSR.Z!f]PT.t>9?Ab
%*o0C?,Chr^4MT;l"/@?6]g'Tt=&/lLCO%CiD8#-Fj=K:fA1pW[_td?-F$7F3X:q`U!iCufmn&Z%;*;-D]HD$BG2WJW&@3/jN+F=C
%5KS6Lp_&]a$X4$F2,tsb@$dZ0fY+r-\r;qfOm#XehO"Z>QT*t"\RGVTak"lHoB0sj?HspWOW"\%4Dc*tc"Gdt_J7g#Gd@#'b(br:
%3CIaG/\]^_o^S/V#2b).gXTIfn1Eh-phIYji9V^oK/!U?$V4?;ER0sJWlo/?poO11Ypp3km^.8,P[N=]`b1&?%`kk*`,BNM"a&#)
%$1'-e>QC9O^:(?2HSYJ(J>2\j@DRB!8.Lpe3>,Ld6#S7j!$#e,ru]KK0J8%?$?58ahNNur\*Hj.CrP.1q#%u3cDnkW1LW6?qZX:X
%;tO#ka:6I1o(`c\\Fs*ibqKOi!q[2@\I:$LFmT->lW.T.!M+9/(^@WI:6Rug+0#^HOt[WgUl:1=?\gs<fiNA!Kb&pBrDlLn;N5s"
%#CJ<\0%/Cp1j-hLPm&TV*YPOSD3QMPXJ?dc$5-"0W4"tMkI/:i(ok58,;,ZW$Rid!?'$L@q_/(3pU6!%V/.`OeHJSq!uHg;'RZZ#
%(m%W9SbVW*XL=V4K]9sQ1S^W\adOZaBp7>5gM+0Ec$]o(f.XeUT2K4hjs_.F"+u<m20:#;P'[jo/'2KrgU!H<Wh^`UcncpZN:?=?
%2k?<]]a0tNBRSrQ#UQTU?pLsm1:U(BTVIKfdb"mZLidTFno1eJ?b<EH\ccG.5F\CecG'+)O1u)_/BG\,SBHLJXDoVhWqR<OK7Y\0
%rDUq!(aP;/RO,PHINOs&i[%A:K_)8(,:K<!`?JheL9Cd8VZ7=ZkS8l!o^Tf[Z=2)YrP<]*%V"ej"e]dB=mpk3HrsFn@j&#j2?AK=
%_QkCk_^8b7XE"`J#9Zt6Ie,#0e<'I*;\+3ir09r%K<>tFlKsA>Ei?`O*7Hd<lQB4/7kLI"&%RS^]^-:porpXJN<-&6NB2"\9W+"*
%B(/H^?s`h?d\7qT$u0OHhA&?IN<:&4a7oN$i:"C!7BKKn9^YPXA7%S)eAY.aWl!5B.V>pSibK%8f,<H'Y2,R((a*l#;,&?e9/XuP
%=CS*A_hl!Yku6-bA'jt!mi[+79t&@"<"-*N4[p!-$Cd?:@-m<1AMA;2n+OG6ar`m@]`66ok`[s(OogOemo#\`VDLe0?/qT/+K:.^
%r#Z/F:PG#+,uhfk/eOlIHgN^@clX+Sf2ZL&T$tM5P$qBqBSIORDpg%9'M/Ui^,,#ZZPB]PIg8=caVO:KCV+pND[F67[S%Y.<#KJL
%_]T_YD9I,jlj/]5<("!.d:&0h#Y/["_lu$-&2(=*a=Oel^BP*"c$r=AV/\scee"<,'i+f6gi]ngQKf-ts4X2l>X@Jr?+EgZBEnIl
%@l%Uug^dh2<gL^o!m*gT2HJ.]$EAd1`8M!TDOJ34VF.,4%+s<hWt>f;'0SRrMSTb/4L'2Xr*?>&XaO<;X'MiGOBC*+gK!0r<S_@S
%4cX?8W&jL_Mr*4%c1.kG(\TlOr].Zbnm$T-f5bbsEY>98i'O(Q.D`)?m[o,WT`radS4)i5hV<1c\o=XuPGm0\eTQDR;YP7!3cf#5
%#gpIoe(eG3j#hI=,TGu&"Q)SpB):d024T28L-_Y3JujPU?McfR?fH)A+4qa/hR5)lMje;CaJD_eF@](sZO(uGVo`;gCq?uAK7[rp
%C5*"]GtjQ=E)*/%hOuC1msH.;:mP[!)h/&B+.lOR2j;`lS/Z]c=OYLtC>)faJn!?F_-g[OB$K8rWKXK62H!L#j?uSO-"dW7/U0T)
%NB/(n8.ejL:X]/D2-RS8WYaVn0OL(P<*l,D-E(;E)=q]sa4'l73g9_$b!,Q/.]*!_i-;mj@2eil)->Nn[aD?Nj>tF;2'pph30VdL
%G*5>L:r_03O\)##M!:V!9a94I<I<n>=n1UNYGpkpA\3nZ,Z/6@J=K*<+tZ5VX-*c[S!hl5X/qU=@QkYpjf(\m6PKZL@(#rLlWVDE
%'nfB`fGtubUXG#U>cP%\>C]Yg!Z"*aU3-[1-826BqRnj^h5#I-B6d/%Lqr1!o#4tQXsUEOY4\0I'V,BhF&tSn3+sM?e\um^YZ7ar
%!(8?Gp4JKa.,d.dE7QH'Z.dQ"j?22VkDcmnOW)WM+@:/?U5;0$&]E5-[Wpu3Ldq,_.2Mj$=g."#OjW64:,3F30WhtK^gXd8iMt=\
%liSQ*J3+_FWkp?OQ4lHH'm<Me,P\uF6(!fPlPYrH>Jkot=33%@(I'6DN:tOH"m/WT+a\A."?R?\i5&/5E+]R/U.hK$o&\Uuo;7C!
%3:I:^*+Q`KB2sRJ&SN'Ndd-.VSQSN,.ZZh9dq@4s7<Z'WT2V*R8j4LCQ>%9[K)<<tPU7pNo008'G$9!YXet$7\49;gO#@DDj^I<[
%1F9An1\P2RK@r%bl;)nR/PV=^8L2Z(oZZ%_9qi\.C"'l"bGNKYAlE3%i;mMo"g+kYm+JaMa6>()!5(6r<egIC=:B`q=O`,%o`9Fb
%gdQo`%!rX34V#pN*Eogf&4L@gV:KW#S%j!D_A?%8:NFk&UZ=Cn)QbRp+X!/(3W5K'S(Op9b8(kMOC#.PHtb>i%2C0b"&3&oeVRHj
%$hV^rmh,N/1T'0qWnGYb0FUL[HT)NeW3q'>H.@^um8?o@)_P3-l\2`VlYXn7>UO1/$;CgYP@N'i8?/`@\]DMuQHJB5Ieb#Y^N"5\
%l@^rnLqkEKRJ(B3+[Bq"?hKG@em3L(oG,)$8KE4*M;[PBA]6'tVh[ZVo`s(9h=K7dSbX./<?N4F/fuCtLA6Nl,;;Cgp2gk:m+VD`
%P58e:Q7bWF"j5I(l=To)_Qg;YY[6aV^(R.fV-9^A4\d/iU'<_X44^:RdFgqi:(FB8CI"e%@AM]cAi9LMmQ/c@2a;Qr@fMbVY"uN]
%I4>[KddbHBXHaj6ns:e&eL@p:a:\c"Y<>Eio?\qPp")Q9KX@[[Y69-P@=]48ERoQCV=-%5UoMZo3;gRE_Xm`PDm_^E`_[\99e1F=
%liLP'7TUfG>1-R;Td@8FQI%^^LKO"`hA5(G4212"9e.M]0Rd$W*S*J&g:&mJ`NnMH=pd9P,?A$pq*I)^kkF\p*CTm'mQF4"n#&$/
%LS%d/o"[LN4El^np\]VI]"_\Rf(E[)0),2u+q/F$l1pB+(k>.(QH*C1OVrZli/8-K^ud:MoGqH"V&0=+!Nl795eg^%NF6O*=,:oB
%#Qa^;!i`1qj.75Z?83ak;+FJA4;8HS\;-#GOOpIf?+,qF>;85l*?j-6[#A\E,g8'AI'ctkc?B9ahCR_\+>k$PAM^FQ6;,1m5qQDT
%N\ksRKG0?9*dq?1\UeX*II%d89#C-B@sB?[e#Vh@d2eBmGg,#MkMGbb*f"r!8p^8&0=ELtch<0cX-*7mI=;!Mj2)XM.u$PfB>tPN
%%.Lq"hcZ%uLSVpug772G#T-l1<$!`&eORT]g1`o$MLVY^)sFX`c307l:ggU-Z_:uJ,(9-k2_ro-g6$,UmEQuX'U;;Cp27$>4YCHK
%L()t!qmKCUf+$U9l>s`=I76o$^r@Vm<=ZiMc0tPpWum8kU#YY;pUgI:Y5L$R^&C7^*T-hbpE+m2qfW;Fl(<J#f,t%U:I"bkXc)*7
%Vgn[2%j-:Ko>@4#bS^?SDsO%Pr9I-Crq12Zq<>pYJ,S8Sq>ZOqe*2U:qPW6LhuDkXrmUlX_==?A~>
%AI9_PrivateDataEnd
